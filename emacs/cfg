(add-to-list 'load-path "~/.emacs.d/script") ; load path for scripts
;; Remove splash screen
(setq inhibit-splash-screen t)
; remove toolbar
(tool-bar-mode -1)
; visual line mode by default
(global-visual-line-mode 1)

; soft indent (GREAT for outlining, like ORG mode!)
;   (defun srb-adaptive-indent (beg end)
;     "Indent the region between BEG and END with adaptive filling."
;     (goto-char beg)
;     (while
;         (let ((lbp (line-beginning-position))
;       (lep (line-end-position)))
;   (put-text-property lbp lep 'wrap-prefix (fill-context-prefix lbp lep))
;   (search-forward "\n" end t))))

;   (define-minor-mode srb-adaptive-wrap-mode
;     "Wrap the buffer text with adaptive filling."
;     :lighter ""
;     (save-excursion
;       (save-restriction
;         (widen)
;         (let ((buffer-undo-list t)
;       (inhibit-read-only t)
;       (mod (buffer-modified-p)))
;   (if srb-adaptive-wrap-mode
;       (progn
;         (setq word-wrap t)
;         (unless (member '(continuation) fringe-indicator-alist)
;          (push '(continuation) fringe-indicator-alist))
;         (jit-lock-register 'srb-adaptive-indent))
;     (jit-lock-unregister 'srb-adaptive-indent)
;     (remove-text-properties (point-min) (point-max) '(wrap-prefix pref))
;     (setq fringe-indicator-alist
;      (delete '(continuation) fringe-indicator-alist))
;     (setq word-wrap nil))
;   (restore-buffer-modified-p mod)))))

;   ; enable soft indents by default
;   (add-hook 'text-mode-hook 'srb-adaptive-wrap-mode)

(require 'org-install) ; force use of installed org-mode (not the one that comes by default with emacs)

(setq-default indicate-empty-lines t)
(setq-default show-trailing-whitespace t)

(setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar") ; load path for ditaa
(require 'org-exp-blocks)

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode)) ; start up org-mode for .org files
; some default hotkeys for org-mode
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t) ; write timestamp when a TODO changes to DONE
(setq org-agenda-files (list "~/org"))


;(global-set-key (kbd "<return>") 'org-insert-heading)

(require 'color-theme) ; color themes...
(color-theme-initialize)
(color-theme-charcoal-black) ; load default color theme

; yasnippet
(add-to-list 'load-path "/usr/share/emacs/site-lisp/yas")
(require 'yasnippet) ;; not yasnippet-bundle
(yas/initialize)
(yas/load-directory "/usr/share/emacs/site-lisp/yas/snippets")

; allow SCIM
(require 'scim-bridge)
(add-hook 'after-init-hook 'scim-mode-on)
; Setup input status switch keystroke. (SUPER-space)
(scim-define-common-key (kbd "s-SPC") t)
; Use C-SPC for Set Mark command
(scim-define-common-key (kbd "C-SPC") nil)
; Use C-/ for Undo command
(scim-define-common-key (kbd "C-/") nil)
; Change cursor color depending on SCIM status
(setq scim-cursor-color '("red" "blue" "limegreen"))

; vimpulse (requires viper.el and vimpulse.el)
(require 'vimpulse)
; some keymaps from ~/.vimrc
(vimpulse-map ",w" 'save-buffer) ; save
(vimpulse-map ",q" 'kill-buffer) ; quit (current buffer; have to press RETURN)
(vimpulse-map ",x" 'save-buffers-kill-emacs) ; save and quit
; make "jk" behave as ESC key
(defun viper-escape-if-next-char (c)
    "Watches the next letter.  If c, then switch to viper mode, otherwise insert a j and forward unpressed key to unread-command-events"
      (self-insert-command 1)
        (let ((next-key (read-event)))
              (if (= c next-key)
                        (progn
                                    (delete-backward-char 1)
                                              (viper-mode))
                              (setq unread-command-events (list next-key)))))

(defun viper-escape-if-next-char-is-k (arg)
    (interactive "p")
      (if (= arg 1)
              (viper-escape-if-next-char ?k)
                  (self-insert-command arg)))

(define-key viper-insert-basic-map (kbd "j") 'viper-escape-if-next-char-is-k)

; make vimpulse work for org-mode!
(vimpulse-map "o" (lambda ()
                     (interactive)
                     (end-of-line)
                     (org-insert-heading)
                     (viper-append nil)
                     ))
(vimpulse-map "t" (lambda ()
                     (interactive)
                     (end-of-line)
                     (org-insert-todo-heading nil)
                     (viper-append nil)
                     ))
(vimpulse-map (kbd "M-o") (lambda ()
                     (interactive)
                     (end-of-line)
                     (org-insert-heading)
                     (org-metaright)
                     (viper-append nil)
                     ))
(vimpulse-map (kbd "M-t") (lambda ()
                     (interactive)
                     (end-of-line)
                     (org-insert-todo-heading nil)
                     (org-metaright)
                     (viper-append nil)
                     ))
(vimpulse-map "T" 'org-todo) ; mark a TODO item as DONE
(vimpulse-map ";a" 'org-agenda) ; access agenda buffer
(vimpulse-map "-" 'org-cycle-list-bullet) ; change bullet style

; allow us to access org-mode keys directly from viper's "Normal" mode
(vimpulse-map "L" 'org-shiftright)
(vimpulse-map "H" 'org-shiftleft)
(vimpulse-map "K" 'org-shiftup)
(vimpulse-map "J" 'org-shiftdown)
(vimpulse-map (kbd "M-l") 'org-metaright)
(vimpulse-map (kbd "M-h") 'org-metaleft)
(vimpulse-map (kbd "M-k") 'org-metaup)
(vimpulse-map (kbd "M-j") 'org-metadown)
(vimpulse-map (kbd "M-L") 'org-shiftmetaright)
(vimpulse-map (kbd "M-H") 'org-shiftmetaleft)
(vimpulse-map (kbd "M-K") 'org-shiftmetaup)
(vimpulse-map (kbd "M-J") 'org-shiftmetadown)

(vimpulse-map (kbd "<f12>") 'org-export-as-html)

; auto-generated stuff by emacs itself...
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(scroll-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 105 :width normal :foundry "xos4" :family "Terminus")))))

; vim: syntax=lisp
