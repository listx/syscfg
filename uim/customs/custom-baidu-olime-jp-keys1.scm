(define baidu-olime-jp-next-segment-key '(generic-go-right-key))
(define baidu-olime-jp-next-segment-key? (make-key-predicate '(generic-go-right-key?)))
(define baidu-olime-jp-prev-segment-key '(generic-go-left-key))
(define baidu-olime-jp-prev-segment-key? (make-key-predicate '(generic-go-left-key?)))
(define baidu-olime-jp-extend-segment-key '("<IgnoreCase><Control>o" "<Shift>right"))
(define baidu-olime-jp-extend-segment-key? (make-key-predicate '("<IgnoreCase><Control>o" "<Shift>right")))
(define baidu-olime-jp-shrink-segment-key '("<IgnoreCase><Control>i" "<Shift>left"))
(define baidu-olime-jp-shrink-segment-key? (make-key-predicate '("<IgnoreCase><Control>i" "<Shift>left")))
(define baidu-olime-jp-transpose-as-hiragana-key '("F6" "Muhenkan"))
(define baidu-olime-jp-transpose-as-hiragana-key? (make-key-predicate '("F6" "Muhenkan")))
(define baidu-olime-jp-transpose-as-katakana-key '("F7" "Muhenkan"))
(define baidu-olime-jp-transpose-as-katakana-key? (make-key-predicate '("F7" "Muhenkan")))
(define baidu-olime-jp-transpose-as-halfkana-key '("F8" "Muhenkan"))
(define baidu-olime-jp-transpose-as-halfkana-key? (make-key-predicate '("F8" "Muhenkan")))
(define baidu-olime-jp-transpose-as-halfwidth-alnum-key '("F10"))
(define baidu-olime-jp-transpose-as-halfwidth-alnum-key? (make-key-predicate '("F10")))
(define baidu-olime-jp-transpose-as-fullwidth-alnum-key '("F9"))
(define baidu-olime-jp-transpose-as-fullwidth-alnum-key? (make-key-predicate '("F9")))
(define baidu-olime-jp-commit-as-opposite-kana-key '("<IgnoreCase><Shift>q"))
(define baidu-olime-jp-commit-as-opposite-kana-key? (make-key-predicate '("<IgnoreCase><Shift>q")))
