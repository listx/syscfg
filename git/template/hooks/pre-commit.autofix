#!/usr/bin/env bash

# This script fixes files in the index and working tree based on the following
# three criteria:
#
#   (1) lack of final newlines,
#   (2) trailing whitespace, and
#   (3) trailing blank lines at EOF,
#
# in that order. All three categories of errors are fixed only if they are in
# the staging area. Any such errors elsewhere in the repository are untouched.
# Trailing whitespace is only corrected on those specific lines added into the
# staging area; i.e., such lines that already exist from a previous commit are
# left alone.
#
# The last category (trailing blank lines of a file) is the only category
# treated aggressively. Adding a trailing blank line to the staging area
# triggers the deletion of *all* such blank lines in the file.

# We define "newline" as the traditional UNIX line feed character (0x0a).

set -o errexit
# Make this script interactive (by default, git hooks are not run in an
# interactive prompt.) In particular, this allows us to read STDIN from the
# user.
exec < /dev/tty

red=$'\e[1;31m'
blue=$'\e[1;34m'
nocolor=$'\e[0m'

# Print associative array.
function print_keys()
{
	for key in "$@"; do
		echo "$key"
	done
}

function ask_to_fix
{
	response=""
	while true; do
		read -r -p "${blue}Autofix [y,Y,n,q,?]?${nocolor} " response
		case $response in
			y) response="fix_index"; break ;;
			Y) response="fix_both"; break ;;
			n) exit 1 ;;
			q) exit 1 ;;
			*) echo -e "${red}\
y - fix staging area
Y - fix staging area and working tree
n - abort commit
q - abort commit
? - print help${nocolor}" ;;
		esac
	done
}

function confirm_commit
{
	response=""
	while true; do
		read -r -p "${blue}Continue to commit [y,n,q,?]?${nocolor} " response
		case $response in
			y) break ;;
			n) exit 1 ;;
			q) exit 1 ;;
			*) echo -e "${red}\
y - commit
n - abort commit
q - abort commit
? - print help${nocolor}" ;;
		esac
	done
}
errors_bl=0
errors_nl=0
errors_tw=0
empty_index=0
amending=0
noeol="^\\\ No newline at end of file"
declare -a bl nl
declare -A tw

# Mark files without a final newline.
while read -r file; do
	if (($(git status --porcelain "$file" | grep -c -v "^D"))) \
		&& (($(git diff --cached "$file" \
			| tail -n1 | grep -c "$noeol"))); then
		nl+=("$file")
		errors_nl=1
	fi
done < <(git diff --cached --name-only)

# Mark files that have trailing whitespace.
while read -r line; do
	file=$(echo "$line" | cut -d: -f1)
	lnum=$(echo "$line" | cut -d: -f2)
	mode=$(git ls-files --stage | cut -d " " -f1)
	if [ -z "${tw[$file]}" ]; then
		tw[$file]=$lnum
	else
		tw[$file]+=" $lnum"
	fi
	errors_tw=1
done < <(git diff --check --cached \
	| grep 'trailing whitespace\.$' \
	| sed -e '/^+/d')

# Mark files that have unnecessary trailing blank lines. By default, Git does
# not mark all newly-added trailing blank lines; i.e., a file may have 100 newly
# added trailing blank lines, but Git will only complain on the first such line.
while read -r line; do
	file=$(echo "$line" | cut -d: -f1)
	bl+=("$file")
	errors_bl=1
done < <(git diff --check --cached \
	| grep "new blank line at EOF\.$" \
	| sed -e '/^+/d')

if ((errors_nl)) || ((errors_tw)) || ((errors_bl)); then
	if ((errors_nl)); then
		echo -e "${blue}Files without a final newline:${nocolor}"
		for file in ${nl[*]}; do
			echo "  $file"
		done
	fi
	if ((errors_tw)); then
		echo -e "${blue}Trailing whitespace:${nocolor}"
		print_keys tw | while read file; do
			printf "  $file: line"
			case ${tw[$file]} in
				*" "*) printf "s"
			esac
			for lnum in ${tw[$file]}; do
				printf " $lnum"
			done
			echo
		done
	fi
	if ((errors_bl)); then
		echo -e "${blue}Trailing blank lines at EOF:${nocolor}"
		for file in ${bl[*]}; do
			echo "  $file"
		done
	fi
	ask_to_fix
fi

# Fix all files which need to be fixed for the final newline.
if ((errors_nl)); then
	for file in ${nl[*]}; do
		if [ "$response" == "fix_both" ] \
		|| [ "$response" == "fix_index" ]; then
			# Fix index.
			mode=$(git ls-files --stage "$file" | cut -d " " -f1)
			sha1=$( (cat "$file" && echo) | git hash-object -w --stdin )
			git update-index --cacheinfo "$mode","$sha1","$file"
		fi
		if [ "$response" == "fix_both" ]; then
			# Fix working tree.
			echo >> "$file"
		fi
	done
fi

# Fix all files which need to be fixed for trailing whitespace.
if ((errors_tw)); then
	print_keys "${!tw[@]}" | while read -r file; do
		bools=""
		for lnum in ${tw[$file]}; do
			if [ -z "$bools" ]; then
				bools=" \$. == $lnum"
			else
				bools+=" || \$. == $lnum"
			fi
		done
		if [ "$response" == "fix_both" ] \
		|| [ "$response" == "fix_index" ]; then
			# Fix index.
			mode=$(git ls-files --stage "$file" | cut -d " " -f1)
			sha1=$(perl -p -e "s/[\t ]+$// if ($bools)" "$file" \
				| git hash-object -w --stdin)
			git update-index --cacheinfo "$mode","$sha1","$file"
		fi
		if [ "$response" == "fix_both" ]; then
			# Fix working tree.
			perl -pi -e "s/[\t ]+$// if ($bools)" "$file"
		fi
	done
fi

# Fix all files which need to be fixed for one or more trailing blank lines. It
# could be the case that a new trailing blank line was added on top of
# already-committed, existing blank lines. We delete these lines as well. This
# is the only portion of this script that is "intrusive" in the sense that we
# are touching lines that were *not* explicitly added to the index by the user.
#
# Because we first trim all trailing whitespace above, we only concern ourselves
# with consecutive newline characters.
if ((errors_bl)); then
	for file in ${bl[*]}; do
		if [ "$response" == "fix_both" ] \
		|| [ "$response" == "fix_index" ]; then
			# Fix index.
			mode=$(git ls-files --stage "$file" | cut -d " " -f1)
			sha1=$(perl -0777 -p -e "s/\n+\z/\n/" "$file" \
				| git hash-object -w --stdin)
			git update-index --cacheinfo "$mode","$sha1","$file"
		fi
		if [ "$response" == "fix_both" ]; then
			# Fix working tree.
			perl -0777 -pi -e "s/\n+\z/\n/" "$file"
		fi
	done
fi

# It could be that after fixing all whitespace problems, there is actually
# nothing to commit! If the user was merely amending a commit, then there is no
# error (the user could be trying to just reword the commit message).
if (( $(git diff --cached | wc -l) == 0 )); then
	empty_index=1
	if [[ $(ps -ocommand= -p $PPID) == "git commit --amend" ]]; then
		amending=1
	fi
fi

# Otherwise, pause for user input before opening up the commit message editor.
if ((errors_nl)) || ((errors_tw)) || ((errors_bl)) || ((empty_index && !amending)); then
	confirm_commit
fi
