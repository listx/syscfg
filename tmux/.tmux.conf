# Make TMUX modal. Adaptation of
# https://alexherbo2.github.io/config/tmux/make-tmux-modal/.
#
# By default, we are in "insert" mode which is the "root" key-table. we still
# re-use the existing C-b prefix key as-is to enter the "prefix" key-table, or
# "normal" mode.

# These bindings exit "normal" mode by setting the key table back to the root or
# "insert" mode. The Enter key here is aliased for convenience.
bind-key -T prefix       q          set key-table root
bind-key -T prefix       Enter      set key-table root

# This binding to kill the current window is purposely difficult to execute
# manually, because it is meant to be executed in one "C-M-S-q" sequence from
# Alacritty. There is no danger of accidentally just pressing C-M-q to run this
# command because it must first be preceded by a "C-b" to enter the "prefix"
# key-table.
bind-key -T prefix       C-M-q      kill-window

# Use "j/k" to switch to the next/previous panes. The command to run here was
# derived from the default configuration from `tmux list-keys' and the "special
# tokens" discussion in the "COMMANDS" section of the manpage.
bind-key -T root         C-M-j      select-pane -Z -t :.+
bind-key -T root         C-M-k      select-pane -Z -t :.-
bind-key -T prefix       C-M-j      swap-pane -Z -D
bind-key -T prefix       C-M-k      swap-pane -Z -U
# Spawn a new shell (and create a horizontal split --- Tmux calls this a
# "vertical" split but I like to think of it the other way because I imagine a
# sword running horizontally across the screen to create the split border).
bind-key -T root         C-M-e      split-window -c "#{pane_current_path}"
bind-key -T root         C-M-o      new-window -c "#{pane_current_path}"

# Reload config. C-b R (that's shift-R).
bind-key -T prefix       r source-file ~/.tmux.conf \; display-message "\~/tmux.conf reloaded."

# Share copy-mode's buffer with system clipboard.
bind-key -T copy-mode-vi y          send-keys -X copy-pipe-and-cancel "xsel -i --clipboard"
bind-key -T copy-mode-vi v          send-keys -X begin-selection
bind-key -T copy-mode-vi Escape     send-keys -X clear-selection
bind-key -T copy-mode-vi BSpace     send-keys -X -N 10 cursor-up
bind-key -T copy-mode-vi Space      send-keys -X -N 10 cursor-down

# Move window left/right. For some reason we cannot use "C-M-S-h", where "S"
# means "Shift", and instead we have to use capital letters here.
bind-key -T root         C-M-H      swap-window -t -1\; select-window -t -1
bind-key -T root         C-M-L      swap-window -t +1\; select-window -t +1

# Move across sessions. C-M-N (switch-client -p) is bound from Alacritty.
bind-key -T root         C-M-n      switch-client -n

# List all TMUX buffers. These buffers get changed every time we copy things
# either out of copy-mode (aka "visual" mode), or when we copy things with
# tmux-thumbs.
bind-key -T root         C-M-b      choose-buffer -Z

# Show all windows in the current session in a tree view. Think of
# this as a "vertical window list" alternative to the horizontal window list in
# the status bar, which can get difficult to determine just how many windows
# there actually are in the current session.
bind-key -T root         C-M-w      run-shell -C "choose-tree -Z -w -f'##{==:##{session_name},#{session_name}}'"

# Paste. This buffer is unique to tmux (used by tmux-thumbs) and is separate
# from X primary selection (Shift+Insert to paste) and the clipboard (C-p to
# paste via Alacritty bindings from the local system clipboard).
bind-key -T root         C-M-p      paste-buffer

# Open double-clicked word. See tmux_mouse_word_handler.sh for more information.
bind-key -T root         DoubleClick1Pane     run-shell '~/syscfg/script/tmux_mouse_word_handler.sh \
	"#{pane_id}" \
	"#{pane_current_path}" \
	"#{mouse_word}"'
bind-key -T copy-mode-vi DoubleClick1Pane     run-shell '~/syscfg/script/tmux_mouse_word_handler.sh \
	"#{pane_id}" \
	"#{pane_current_path}" \
	"#{mouse_word}" \
	exit-copy-mode '

# Disable mouse wheel in status bar. See https://superuser.com/a/1492302.
unbind-key -T root WheelUpStatus
unbind-key -T root WheelDownStatus

# Automatically re-balance panes after they are created and/or deleted.
set-hook -g after-split-window  "select-layout -E"
set-hook -g pane-exited         "select-layout -E"

# Use 256 colors.
set -g default-terminal "tmux-256color"

# Set background color for status bar.
set -g status-style "bg=colour16 fg=colour231 bold"

# This sets the color for the name of the session (#{session_name}).
set -g status-left-style "bg=colour51 fg=colour16 bold"

# Set window name to either the current path when at a shell prompt, or to the
# name of the executable when running it.
# See https://stackoverflow.com/a/68043814/437583.
set -g status-interval 1
set -gw automatic-rename on
# If the current command is zsh (our usual shell), then use the current path as
# the name. Otherwise just use the command name instead. When displaying a
# command, bold it so as to disambiguate it against similarly-named paths.
set -g automatic-rename-format "#{?#{==:#{pane_current_command},zsh},#(~/syscfg/script/simplify_path.sh '#{pane_current_path}'),#{pane_current_command}}"

# Colorize window names.
set -gw window-status-current-format "\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour178],\
		#[bg=colour28]}\
	#{window_flags}\
	#{?#{==:#{window_panes},1},\
		,\
		#(expr #{window_panes} - 1)}\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour226#,fg=colour16] #(~/syscfg/script/simplify_path.sh '#{pane_current_path}') ,\
		#[bg=colour46] #W#[bg=colour46] }\
	#[default]"
set -gw window-status-format "\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour178],\
		#[bg=colour28]}\
	#{window_flags}\
	#{?#{==:#{window_panes},1},\
		,\
		#{?#{==:#{window_flags},},\
			 ,\
			}\
		#(expr #{window_panes} - 1)}\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour144#,fg=colour16] #(~/syscfg/script/simplify_path.sh '#{pane_current_path}') ,\
		#[bg=colour65] #W#[bg=colour65] }\
	#[default]"

# Set colors for window titles in general.
set -gw window-status-style "fg=colour16 bold underscore"

# Highlight current active window in the status bar. See
# https://unix.stackexchange.com/q/210174/72230.
set -gw window-status-current-style "fg=colour16 bold"

# Set colors for pane split borders.
set -g pane-active-border-style "fg=white"
set -g pane-border-style        "fg=black"

# Imitate emacs evil-mode's "<N>" and "<I>" modal signifiers to help
# distinguish between modes. When we're in "prefix mode", it is normal mode
# "<N>", where we can press any number of other keys without having to first
# press C-b (the prefix key). By default we start out in "insert" mode "<I>"
# which is when keys are passed through to the underlying application.
#
# "<V>" signifies copy-mode. We use "<V>" because copy-mode resembles Vim's
# visual selection mode.
set -g status-left " #{session_name} #[bg=colour16] #{?#{m/r:(copy|view)-mode,#{pane_mode}},#[bg=colour46#,fg=colour16] <V> ,#{?#{==:#{client_key_table},root},#[fg=colour231] <I> ,#[bg=colour201] <N> }}#[bg=colour16] "
set -g status-right " #[bg=colour213,fg=colour16] #(head -5 ~/.hostname-short || hostname) "

# Configure the format of the status bar. The only difference between this and
# the default (`$ tmux show-options -g status-format') is that we customize the
# `list=left-marker' and `list=right-marker' strings. Unfortunately as of tmux
# 3.2a, there is no way other way to customize only these strings, so we simply
# take the default value and tweak it here..
set -g status-format[0] "#[align=left range=left #{status-left-style}]#[push-default]#{T;=/#{status-left-length}:status-left}#[pop-default]#[norange default]#[list=on align=#{status-justify}]#[list=left-marker]<- #[list=right-marker] ->#[list=on]#{W:#[range=window|#{window_index} #{window-status-style}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-format}#[pop-default]#[norange default]#{?window_end_flag,,#{window-status-separator}},#[range=window|#{window_index} list=focus #{?#{!=:#{window-status-current-style},default},#{window-status-current-style},#{window-status-style}}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-current-format}#[pop-default]#[norange list=on default]#{?window_end_flag,,#{window-status-separator}}}#[nolist align=right range=right #{status-right-style}]#[push-default]#{T;=/#{status-right-length}:status-right}#[pop-default]#[norange default]"

# Set colors for copy-mode selections.
set -gw mode-style "fg=colour16 bg=colour46 bold"

# Don't set limits on status line portion lengths. This way, if either
# status-left or status-right gets too long, they don't get truncated by tmux.
set -g status-left-length 0
set -g status-right-length 0
# When detaching, change back the keymap to 'root', so that when we reattach,
# we start out with 'root' (<I>).
set-hook -g client-detached[0] "set key-table root"

# Automatically renumber windows if one is closed, so that there are no "gaps"
# in between. See https://unix.stackexchange.com/a/51879/72230.
set -g renumber-windows on

# Allow binding of mouse events as keys. As a side effect, this also changes
# the behavior of the mouse wheel from scrolling through the command history to
# scrolling back into the buffer (copy-mode).
set -gw mouse on

# Turn off wrapping when searching in copy-mode (mimic behavior in less(1)).
set -g wrap-search off

# Increase history to 100K lines.
set -g history-limit 100000

# Do not lag after ESC key is pressed.
set -s escape-time 0

# Vi mode (this enables copy-mode-vi bindings in copy-mode; see "tmux
# list-keys").
set -gw mode-keys vi

# List of plugins.
set -g @plugin "tmux-plugins/tpm"
set -g @plugin "fcsonline/tmux-thumbs"
	# Get initial hints closer to the cursor (instead of starting hints from the
	# top of the buffer).
	set -g @thumbs-position off_left
	# Don't show duplicated hints for the same match.
	set -g @thumbs-unique enabled
	# Reverse the order of assigned hints. Useful to get shorter hints closer to
	# the cursor.
	set -g @thumbs-reverse enabled
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "~/.tmux/plugins/tpm/tpm"
