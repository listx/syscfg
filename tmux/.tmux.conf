# Predicate to check if the current window_name is either emacs, emacsclient, or
# git. We include git because "automatic-rename" sets the name to "git" if we
# run "git commit --amend". We also include "tig" because we can invoke git
# interactive rebases (which invokes our emacs editor) from tig.
EMACSLIKE="#{m/r:emacs.*|git|tig,#{window_name}}"

# Make TMUX modal. Adaptation of
# https://alexherbo2.github.io/config/tmux/make-tmux-modal/.
#
# By default, we are in "insert" mode which is the "root" key-table. we still
# re-use the existing C-b prefix key as-is to enter the "prefix" key-table, or
# "normal" mode.

# These bindings exit "normal" mode by setting the key table back to the root or
# "insert" mode. The Enter key here is aliased for convenience.
bind-key -T prefix       q          set key-table root
bind-key -T prefix       Enter      set key-table root

# Use "j/k" to switch to the next/previous panes. The command to run here was
# derived from the default configuration from `tmux list-keys' and the "special
# tokens" discussion in the "COMMANDS" section of the manpage.
bind-key -T root         C-M-j      select-pane -Z -t :.+
bind-key -T root         C-M-k      select-pane -Z -t :.-
# Move pane up/down.
bind-key -T virt         C-M-S-j    swap-pane -Z -D \; set key-table root
bind-key -T virt         C-M-S-k    swap-pane -Z -U \; set key-table root
# Spawn a new shell (and create a horizontal split --- Tmux calls this a
# "vertical" split but I like to think of it the other way because I imagine a
# sword running horizontally across the screen to create the split border).
bind-key -T root         C-M-e      split-window -c "#{pane_current_path}"
bind-key -T virt         C-M-S-e    split-window -h -c "#{pane_current_path}" \; set key-table root
bind-key -T root         C-M-o      new-window -c "#{pane_current_path}"
bind-key -T virt         C-M-S-o    break-pane -t : \; set key-table root

# Reload config. C-b R (that's shift-R).
bind-key -T prefix       r          source-file ~/.tmux.conf \; display-message "\~/tmux.conf reloaded."

# Share copy-mode's buffer with system clipboard.
bind-key -T copy-mode-vi y          send-keys -X copy-pipe-and-cancel "xsel -i --clipboard"
bind-key -T copy-mode-vi v          send-keys -X begin-selection
bind-key -T copy-mode-vi Escape     send-keys -X clear-selection
bind-key -T copy-mode-vi BSpace     send-keys -X -N 10 cursor-up
bind-key -T copy-mode-vi Space      send-keys -X -N 10 cursor-down

# Make tmux encode C-S-{a-z} sequences with the `CSI u` scheme. Otherwise,
# applications that do support it like terminal emacs don't even get these
# events (for reasons unknown). This is pretty hacky and may break, but at least
# we can tie down the tmux and emacs versions down if necessary.
#
# As an example, the following two bindings are equivalent:
#
#   bind-key -T root         C-S-l      send-keys -H 1b 5b 37 36 3b 36 75
#   bind-key -T root         C-S-l      send-keys Escape "[76;6u"
#
# Using the raw hex version may be easier to debug.
#
# Note that there are some regressions and funny behaviors from tmux. For
# example, C-[ cannot be bound (it is indistinguishable from ESC). The same goes
# for C-j/Enter and C-i/TAB. For a discussion about this regression, see
# https://github.com/tmux/tmux/issues/2705.
#
# Also, C-# is allowed (notice that it is not defined as C-S-3), but C-$ is not
# allowed and we have to use C-S-4 (this is a cosmetic oddity for our
# configuration and does not materially affect us).
#
# To get around some of tmux's quirks, we have to use a `virt` key-table.
# This makes it so that we can distinguish, e.g., Tab vs C-i from the root
# key-table. C-i from the root actually sends `F12 Tab` from Alacritty, which
# activates the `virt` key-table, and from there the Tab key sends the
# `CSI u`-encoded form of C-i.

bind-key -T root         F12        set key-table virt
bind-key -T virt         F12        set key-table root

bind-key -T root         C-!        send-keys Escape "[33;5u"
# tmux cannot parse C-", so we send C-S-' from Alacritty.
bind-key -T root         C-S-\'     send-keys Escape "[39;6u"
bind-key -T root         C-\#       send-keys Escape "[35;5u"
bind-key -T root         C-S-4      send-keys Escape "[52;6u"
bind-key -T root         C-S-5      send-keys Escape "[53;6u"
bind-key -T root         C-S-7      send-keys Escape "[55;6u"
bind-key -T root         C-\'       send-keys Escape "[39;5u"
bind-key -T root         C-(        send-keys Escape "[40;5u"
bind-key -T root         C-)        send-keys Escape "[41;5u"
bind-key -T root         C-S-8      send-keys Escape "[56;6u"
bind-key -T root         C-+        send-keys Escape "[43;5u"
bind-key -T root         C-,        send-keys Escape "[44;5u"
bind-key -T root         C--        send-keys Escape "[45;5u"
bind-key -T root         C-.        send-keys Escape "[46;5u"
bind-key -T root         C-/        send-keys Escape "[47;5u"
bind-key -T root         C-0        send-keys Escape "[48;5u"
bind-key -T root         C-1        send-keys Escape "[49;5u"
bind-key -T root         C-2        send-keys Escape "[50;5u"
bind-key -T root         C-3        send-keys Escape "[51;5u"
bind-key -T root         C-4        send-keys Escape "[52;5u"
bind-key -T root         C-5        send-keys Escape "[53;5u"
bind-key -T root         C-6        send-keys Escape "[54;5u"
bind-key -T root         C-7        send-keys Escape "[55;5u"
bind-key -T root         C-8        send-keys Escape "[56;5u"
bind-key -T root         C-9        send-keys Escape "[57;5u"
bind-key -T root         C-:        send-keys Escape "[58;5u"
bind-key -T root         C-\;       send-keys Escape "[59;5u"
bind-key -T root         C-<        send-keys Escape "[60;5u"
bind-key -T root         C-=        send-keys Escape "[61;5u"
bind-key -T root         C->        send-keys Escape "[62;5u"
bind-key -T root         C-S-/      send-keys Escape "[47;6u"
bind-key -T root         C-@        send-keys Escape "[64;5u"
bind-key -T root         C-\\       send-keys Escape "[92;5u"
bind-key -T root         C-]        send-keys Escape "[93;5u"
bind-key -T root         C-^        send-keys Escape "[94;5u"
bind-key -T root         C-_        send-keys Escape "[95;5u"
bind-key -T root         C-`        send-keys Escape "[96;5u"
bind-key -T root         C-S-[      send-keys Escape "[91;6u"
bind-key -T root         C-S-\\     send-keys Escape "[92;6u"
bind-key -T root         C-S-]      send-keys Escape "[93;6u"
bind-key -T root         C-S-`      send-keys Escape "[96;6u"

bind-key -T root         M-!        send-keys Escape "[33;3u"
bind-key -T root         M-S-\'     send-keys Escape "[39;4u"
bind-key -T root         M-\#       send-keys Escape "[35;3u"
bind-key -T root         M-S-4      send-keys Escape "[52;4u"
bind-key -T root         M-S-5      send-keys Escape "[53;4u"
bind-key -T root         M-S-7      send-keys Escape "[55;4u"
bind-key -T root         M-\'       send-keys Escape "[39;3u"
bind-key -T root         M-(        send-keys Escape "[40;3u"
bind-key -T root         M-)        send-keys Escape "[41;3u"
bind-key -T root         M-S-8      send-keys Escape "[56;4u"
bind-key -T root         M-+        send-keys Escape "[43;3u"
bind-key -T root         M-,        send-keys Escape "[44;3u"
bind-key -T root         M--        send-keys Escape "[45;3u"
bind-key -T root         M-.        send-keys Escape "[46;3u"
bind-key -T root         M-/        send-keys Escape "[47;3u"
bind-key -T root         M-0        send-keys Escape "[48;3u"
bind-key -T root         M-1        send-keys Escape "[49;3u"
bind-key -T root         M-2        send-keys Escape "[50;3u"
bind-key -T root         M-3        send-keys Escape "[51;3u"
bind-key -T root         M-4        send-keys Escape "[52;3u"
bind-key -T root         M-5        send-keys Escape "[53;3u"
bind-key -T root         M-6        send-keys Escape "[54;3u"
bind-key -T root         M-7        send-keys Escape "[55;3u"
bind-key -T root         M-8        send-keys Escape "[56;3u"
bind-key -T root         M-9        send-keys Escape "[57;3u"
bind-key -T root         M-:        send-keys Escape "[58;3u"
bind-key -T root         M-\;       send-keys Escape "[59;3u"
bind-key -T root         M-<        send-keys Escape "[60;3u"
bind-key -T root         M-=        send-keys Escape "[61;3u"
bind-key -T root         M->        send-keys Escape "[62;3u"
bind-key -T root         M-S-/      send-keys Escape "[47;4u"
bind-key -T root         M-@        send-keys Escape "[64;3u"
bind-key -T root         M-[        send-keys Escape "[91;3u"
bind-key -T root         M-\\       send-keys Escape "[92;3u"
bind-key -T root         M-]        send-keys Escape "[93;3u"
bind-key -T root         M-^        send-keys Escape "[94;3u"
bind-key -T root         M-_        send-keys Escape "[95;3u"
bind-key -T root         M-`        send-keys Escape "[96;3u"
bind-key -T root         M-S-\\     send-keys Escape "[92;4u"
bind-key -T root         M-S-]      send-keys Escape "[93;4u"
bind-key -T root         M-S-`      send-keys Escape "[96;4u"

bind-key -T root         C-M-!      send-keys Escape "[33;7u"
bind-key -T root         C-M-S-\'   send-keys Escape "[39;8u"
bind-key -T root         C-M-\#     send-keys Escape "[35;7u"
bind-key -T root         C-M-S-4    send-keys Escape "[52;8u"
bind-key -T root         C-M-S-5    send-keys Escape "[53;8u"
bind-key -T root         C-M-S-7    send-keys Escape "[55;8u"
bind-key -T root         C-M-\'     send-keys Escape "[39;7u"
bind-key -T root         C-M-(      send-keys Escape "[40;7u"
bind-key -T root         C-M-)      send-keys Escape "[41;7u"
bind-key -T root         C-M-S-8    send-keys Escape "[56;8u"
bind-key -T root         C-M-+      send-keys Escape "[43;7u"
bind-key -T root         C-M-,      send-keys Escape "[44;7u"
bind-key -T root         C-M--      send-keys Escape "[45;7u"
bind-key -T root         C-M-.      send-keys Escape "[46;7u"
bind-key -T root         C-M-/      send-keys Escape "[47;7u"
bind-key -T root         C-M-0      send-keys Escape "[48;7u"
bind-key -T root         C-M-1      send-keys Escape "[49;7u"
bind-key -T root         C-M-2      send-keys Escape "[50;7u"
bind-key -T root         C-M-3      send-keys Escape "[51;7u"
bind-key -T root         C-M-4      send-keys Escape "[52;7u"
bind-key -T root         C-M-5      send-keys Escape "[53;7u"
bind-key -T root         C-M-6      send-keys Escape "[54;7u"
bind-key -T root         C-M-7      send-keys Escape "[55;7u"
bind-key -T root         C-M-8      send-keys Escape "[56;7u"
bind-key -T root         C-M-9      send-keys Escape "[57;7u"
bind-key -T root         C-M-:      send-keys Escape "[58;7u"
bind-key -T root         C-M-\;     send-keys Escape "[59;7u"
bind-key -T root         C-M-<      send-keys Escape "[60;7u"
bind-key -T root         C-M-=      send-keys Escape "[61;7u"
bind-key -T root         C-M->      send-keys Escape "[62;7u"
bind-key -T root         C-M-S-/    send-keys Escape "[47;8u"
bind-key -T root         C-M-@      send-keys Escape "[64;7u"
bind-key -T root         C-M-\\     send-keys Escape "[92;7u"
bind-key -T root         C-M-]      send-keys Escape "[93;7u"
bind-key -T root         C-M-^      send-keys Escape "[94;7u"
bind-key -T root         C-M-_      send-keys Escape "[95;7u"
bind-key -T root         C-M-`      send-keys Escape "[96;7u"
bind-key -T root         C-M-S-\\   send-keys Escape "[92;8u"
bind-key -T root         C-M-S-]    send-keys Escape "[93;8u"
bind-key -T root         C-M-S-`    send-keys Escape "[96;8u"

bind-key -T root         M-Tab      send-keys Escape "[9;3u"
bind-key -T root         M-S-Tab    send-keys Escape "[9;4u"
bind-key -T root         C-Tab      send-keys Escape "[9;5u"
bind-key -T root         C-S-Tab    send-keys Escape "[9;6u"
bind-key -T root         C-M-Tab    send-keys Escape "[9;7u"
bind-key -T root         C-M-S-Tab  send-keys Escape "[9;8u"

bind-key -T virt         C-y          if-shell -F $EMACSLIKE "send-keys Escape '[127;2u'" "send-keys BSpace" \; set key-table root
bind-key -T root         M-BSpace     send-keys Escape "[127;3u"
bind-key -T root         M-S-BSpace   send-keys Escape "[127;4u"
bind-key -T root         C-BSpace     send-keys Escape "[127;5u"
bind-key -T root         C-S-BSpace   send-keys Escape "[127;6u"
bind-key -T root         C-M-BSpace   send-keys Escape "[127;7u"
bind-key -T root         C-M-S-BSpace send-keys Escape "[127;8u"

# NOTE: tmux has a regression regarding `CSI u` support:
# https://github.com/tmux/tmux/issues/2705. This is one reason why we use code
# 13 (\r) instead of 10 (\n) for RET, because \r does not collide with C-j.
#
# C-z is ASCII 0x1a, which is what we send from Alacritty for S-Enter.
bind-key -T virt         C-z         send-keys Escape "[13;2u" \; set key-table root
bind-key -T root         M-Enter     send-keys Escape "[13;3u"
bind-key -T root         M-S-Enter   send-keys Escape "[13;4u"
bind-key -T root         C-Enter     send-keys Escape "[13;5u"
bind-key -T root         C-S-Enter   send-keys Escape "[13;6u"
bind-key -T root         C-M-Enter   send-keys Escape "[13;7u"
bind-key -T root         C-M-S-Enter send-keys Escape "[13;8u"

bind-key -T root         M-Space     send-keys Escape "[32;3u"
bind-key -T root         M-S-Space   send-keys Escape "[32;4u"
bind-key -T root         C-Space     send-keys Escape "[32;5u"
bind-key -T root         C-S-Space   send-keys Escape "[32;6u"
bind-key -T root         C-M-Space   send-keys Escape "[32;7u"
bind-key -T root         C-M-S-Space send-keys Escape "[32;8u"

# Special handling of "Escape" to avoid conflicting with itself.
bind-key -T virt         C-]         send-keys Escape "[27;2u" \; set key-table root  # S-ESC
bind-key -T virt         C-^         send-keys Escape "[27;3u" \; set key-table root  # M-ESC
bind-key -T virt         C-_         send-keys Escape "[27;4u" \; set key-table root  # M-S-ESC
bind-key -T virt         C-Escape     send-keys Escape "[27;5u" \; set key-table root
bind-key -T virt         C-S-Escape   send-keys Escape "[27;6u" \; set key-table root
bind-key -T virt         C-M-Escape   send-keys Escape "[27;7u" \; set key-table root
bind-key -T virt         C-M-S-Escape send-keys Escape "[27;8u" \; set key-table root

# Special handling of "C-@" to map it to something other than the traditional
# NUL "\x00" byte.
bind-key -T virt         C-@        send-keys Escape "[64;5u" \; set key-table root

# Special handling of "[" to avoid conflicting with Escape key.
bind-key -T virt         M-[        send-keys Escape "[91;3u" \; set key-table root
bind-key -T virt         M-S-[      send-keys Escape "[91;4u" \; set key-table root
bind-key -T virt         C-[        send-keys Escape "[91;5u" \; set key-table root
bind-key -T virt         C-S-[      send-keys Escape "[91;6u" \; set key-table root
bind-key -T virt         C-M-[      send-keys Escape "[91;7u" \; set key-table root
bind-key -T virt         C-M-S-[    send-keys Escape "[91;8u" \; set key-table root

# Special handling of "i" to avoid conflicting with Tab key.
bind-key -T virt         C-M-i      send-keys Escape "[105;7u" \; set key-table root
bind-key -T virt         C-M-S-i    send-keys Escape "[105;8u" \; set key-table root

# Special handling of "m" to avoid conflicting with Enter key.
bind-key -T virt         C-M-m      send-keys Escape "[109;7u" \; set key-table root
bind-key -T virt         C-M-S-m    send-keys Escape "[109;8u" \; set key-table root

# Buggy keys in tmux where there is no way to disambiguate these keys from TAB or RET.
bind-key -T virt         C-i        if-shell -F $EMACSLIKE "send-keys Escape '[105;5u'" "send-keys -H 09" \; set key-table root
bind-key -T virt         C-m        if-shell -F $EMACSLIKE "send-keys Escape '[109;5u'" "send-keys -H 0d" \; set key-table root

bind-key -T root         C-S-a      send-keys Escape  "[97;6u"
bind-key -T root         C-S-b      send-keys Escape  "[97;6u"
bind-key -T root         C-S-c      send-keys Escape  "[99;6u"
bind-key -T root         C-S-d      send-keys Escape  "[100;6u"
bind-key -T root         C-S-e      send-keys Escape  "[101;6u"
bind-key -T root         C-S-f      send-keys Escape  "[102;6u"
bind-key -T root         C-S-g      send-keys Escape  "[103;6u"
bind-key -T root         C-S-h      send-keys Escape  "[104;6u"
bind-key -T root         C-S-i      send-keys Escape  "[105;6u"
bind-key -T root         C-S-j      send-keys Escape  "[106;6u"
bind-key -T root         C-S-k      send-keys Escape  "[107;6u"
bind-key -T root         C-S-l      send-keys Escape  "[108;6u"
bind-key -T root         C-S-m      send-keys Escape  "[109;6u"
bind-key -T root         C-S-n      send-keys Escape  "[110;6u"
bind-key -T root         C-S-o      send-keys Escape  "[111;6u"
bind-key -T root         C-S-p      send-keys Escape  "[112;6u"
bind-key -T root         C-S-q      send-keys Escape  "[113;6u"
bind-key -T root         C-S-r      send-keys Escape  "[114;6u"
bind-key -T root         C-S-s      send-keys Escape  "[115;6u"
bind-key -T root         C-S-t      send-keys Escape  "[116;6u"
bind-key -T root         C-S-u      send-keys Escape  "[117;6u"
bind-key -T root         C-S-v      send-keys Escape  "[118;6u"
bind-key -T root         C-S-w      send-keys Escape  "[119;6u"
bind-key -T root         C-S-x      send-keys Escape  "[120;6u"
bind-key -T root         C-S-y      send-keys Escape  "[121;6u"
bind-key -T root         C-S-z      send-keys Escape  "[122;6u"

# Switch to left/right window.
bind-key -T root         C-M-h      previous-window
bind-key -T root         C-M-l      next-window

# Move window left/right.
bind-key -T virt         C-M-S-h    swap-window -t -1\; select-window -t -1 \; set key-table root
bind-key -T virt         C-M-S-l    swap-window -t +1\; select-window -t +1 \; set key-table root

# Move across sessions.
bind-key -T root         C-M-n      switch-client -n

# List all TMUX buffers. These buffers get changed every time we copy things
# either out of copy-mode (aka "visual" mode), or when we copy things with
# tmux-thumbs.
bind-key -T root         C-M-b      choose-buffer -Z

# Show all windows in the current session in a tree view. Think of
# this as a "vertical window list" alternative to the horizontal window list in
# the status bar, which can get difficult to determine just how many windows
# there actually are in the current session.
bind-key -T root         C-M-w      run-shell -C "choose-tree -Z -w -f'##{==:##{session_name},#{session_name}}'"

# Copy things into the tmux buffer.
bind-key -T virt         C-M-S-y    copy-mode \; set key-table root

# Workaround for tmux-thumbs and OSC52. See
# https://github.com/fcsonline/tmux-thumbs/issues/54#issuecomment-934147537.
set -g @thumbs-command 'tmux set-buffer -w "{}" && tmux display-message "Copied {}"'
# `thumbs-upcase-command` is useful when we are in a shell session and we want
# to copy/paste something from somewhere else on the screen into the current
# line. To invoke it, simply type in a capital letter instead of the usual
# lowercase one.
set -g @thumbs-upcase-command 'tmux set-buffer -w "{}" && tmux paste-buffer && tmux display-message "Copied and pasted {}"'

# Paste from the the tmux buffer.
bind-key -T root         C-M-p      paste-buffer

# Open double-clicked word. See tmux_mouse_word_handler.sh for more information.
bind-key -T root         DoubleClick1Pane     run-shell '~/syscfg/script/tmux_mouse_word_handler.sh \
	"#{pane_id}" \
	"#{pane_current_path}" \
	"#{mouse_word}"'
bind-key -T copy-mode-vi DoubleClick1Pane     run-shell '~/syscfg/script/tmux_mouse_word_handler.sh \
	"#{pane_id}" \
	"#{pane_current_path}" \
	"#{mouse_word}" \
	exit-copy-mode '

# Disable mouse wheel in status bar. See https://superuser.com/a/1492302.
unbind-key -T root WheelUpStatus
unbind-key -T root WheelDownStatus

# Make messages appear for 4 seconds by default.
set -g display-time 4000

# Automatically re-balance panes after they are created and/or deleted.
set-hook -g after-split-window  "select-layout -E"
set-hook -g pane-exited         "select-layout -E"


# Use 24-bit colors.
set -g default-terminal "alacritty-xtermlike"
set -ag terminal-overrides ",alacritty-xtermlike:RGB"

# Set background color for status bar.
set -g status-style "bg=colour16 fg=colour231 bold"

# This sets the color for the name of the session (#{session_name}).
set -g status-left-style "bg=colour51 fg=colour16 bold"

# Set window name to either the current path when at a shell prompt, or to the
# name of the executable when running it.
# See https://stackoverflow.com/a/68043814/437583.
set -g status-interval 1
set -gw automatic-rename on
# If the current command is zsh (our usual shell), then use the current path as
# the name. Otherwise just use the command name instead. When displaying a
# command, bold it so as to disambiguate it against similarly-named paths.
set -g automatic-rename-format "#{?#{==:#{pane_current_command},zsh},#(~/syscfg/script/tmux_pane_pwd_cached.sh '#{window_id}' '#{pane_id}' '#{pane_current_path}'),#{pane_current_command}}"

# Colorize window names.
set -gw window-status-current-format "\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour178],\
		#[bg=colour28]}\
	#{window_flags}\
	#{?#{==:#{window_panes},1},\
		 ,\
		#(expr #{window_panes} - 1)}\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=colour226#,fg=colour16] #(~/syscfg/script/tmux_pane_pwd_cached.sh '#{window_id}' '#{pane_id}' '#{pane_current_path}') ,\
		#[bg=colour46] #W#[bg=colour46] }\
	#[default]"
set -gw window-status-format "\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=#333322#,fg=#fcde8f],\
		#[bg=#2e3330,fg=#86eb8e]}\
	#{?#{==:#{window_flags},},\
		 ,\
		#{window_flags}}\
	#{?#{==:#{window_panes},1},\
		 ,\
		#(expr #{window_panes} - 1)}\
	#{?#{==:#{pane_current_command},zsh},\
		#[bg=#333322#,fg=#fcde8f] #(~/syscfg/script/tmux_pane_pwd_cached.sh '#{window_id}' '#{pane_id}' '#{pane_current_path}') ,\
		#[bg=#2e3330#,fg=#86eb8e] #W#[bg=#2e3330] }\
	#[default]"

# Set colors for window titles in general.
set -gw window-status-style "fg=colour16 bold"

# Highlight current active window in the status bar. See
# https://unix.stackexchange.com/q/210174/72230.
set -gw window-status-current-style "fg=colour16 bold"

# Set colors for pane split borders.
set -g pane-active-border-style "bg=colour231  fg=colour231"
set -g pane-border-style        "bg=colour235  fg=colour231"

# Set colors for the active pane. For some reason this option is named
# "window-active-style" but it actually only affects the active pane within a
# window.
set -gw window-active-style "bg=terminal fg=colour231"
set -gw window-style "bg=colour235 fg=default"

# Ask terminal if focus events are supported and if so, pass focus events to
# applications. This makes terminal emacs aware that it loses focus when we
# switch away from it from tmux (e.g., when we move to a different pane).
set -g focus-events on

# Imitate emacs evil-mode's "<N>" and "<I>" modal signifiers to help
# distinguish between modes. When we're in "prefix mode", it is normal mode
# "<N>", where we can press any number of other keys without having to first
# press C-b (the prefix key). By default we start out in "insert" mode "<I>"
# which is when keys are passed through to the underlying application.
#
# "<V>" signifies copy-mode. We use "<V>" because copy-mode resembles Vim's
# visual selection mode.
#
# For other key tables, use the format "<key-table-name>".
#
# Summary
#
# key-table or mode   | indicator
# --------------------+----------
# root                | <I>
# prefix              | <N>
# copy-mode/view-mode | <V>
# other               | <other>
#
#
# By default the other key table indicators are hidden. To see them, run "tmux
# setenv L_TMUX_DEBUG 1". Now you can press F12 from the root to see this
# indicator.
set -g status-left " #{session_name} #[bg=colour16]\
		#{?#{m/r:(copy|view)-mode,#{pane_mode}}, #[bg=colour46#,fg=colour16] <V> ,\
			#{?#{==:#{client_key_table},prefix}, #[bg=colour201] <N> ,\
				#{?#{==:#{client_key_table},root}, #[fg=colour231] <I> ,\
					#{?L_TMUX_DEBUG, #[bg=colour160#,fg=colour231] <#{client_key_table}> ,\
						 #[fg=colour231] <I> }}}}\
		#[bg=colour16] "

set -g status-right ""

# Configure the format of the status bar. The only difference between this and
# the default (`$ tmux show-options -g status-format') is that we customize the
# `list=left-marker' and `list=right-marker' strings. Unfortunately as of tmux
# 3.2a, there is no way other way to customize only these strings, so we simply
# take the default value and tweak it here..
set -g status-format[0] "#[align=left range=left #{status-left-style}]#[push-default]#{T;=/#{status-left-length}:status-left}#[pop-default]#[norange default]#[list=on align=#{status-justify}]#[list=left-marker]<- #[list=right-marker] ->#[list=on]#{W:#[range=window|#{window_index} #{window-status-style}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-format}#[pop-default]#[norange default]#{?window_end_flag,,#{window-status-separator}},#[range=window|#{window_index} list=focus #{?#{!=:#{window-status-current-style},default},#{window-status-current-style},#{window-status-style}}#{?#{&&:#{window_last_flag},#{!=:#{window-status-last-style},default}}, #{window-status-last-style},}#{?#{&&:#{window_bell_flag},#{!=:#{window-status-bell-style},default}}, #{window-status-bell-style},#{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}}]#[push-default]#{T:window-status-current-format}#[pop-default]#[norange list=on default]#{?window_end_flag,,#{window-status-separator}}}#[nolist align=right range=right #{status-right-style}]#[push-default]#{T;=/#{status-right-length}:status-right}#[pop-default]#[norange default]"

# Set colors for copy-mode selections.
set -gw mode-style "fg=colour16 bg=colour46 bold"

# Don't set limits on status line portion lengths. This way, if either
# status-left or status-right gets too long, they don't get truncated by tmux.
set -g status-left-length 0
set -g status-right-length 0
# When detaching, change back the keymap to 'root', so that when we reattach,
# we start out with 'root' (<I>).
set-hook -g client-detached[0] "set key-table root"

# Automatically renumber windows if one is closed, so that there are no "gaps"
# in between. See https://unix.stackexchange.com/a/51879/72230.
set -g renumber-windows on

# Allow binding of mouse events as keys. As a side effect, this also changes
# the behavior of the mouse wheel from scrolling through the command history to
# scrolling back into the buffer (copy-mode).
set -gw mouse on

# Turn off wrapping when searching in copy-mode (mimic behavior in less(1)).
set -g wrap-search off

# Increase history to 100K lines.
set -g history-limit 100000

# Do not lag after ESC key is pressed.
set -s escape-time 0

# Vi mode (this enables copy-mode-vi bindings in copy-mode; see "tmux
# list-keys").
set -gw mode-keys vi

# Avoid "clipetty--emit: Opening output file: Permission denied, /dev/pts/0".
# See https://github.com/hlissner/doom-emacs/issues/3674#issuecomment-670840781
# and
# https://github.com/spudlyo/clipetty/blame/01b39044b9b65fa4ea7d3166f8b1ffab6f740362/README.md#L160.
set -ag update-environment "SSH_TTY"

# Allow OSC52 to set the clipboard.
set -g set-clipboard on

# List of plugins.
set -g @plugin "tmux-plugins/tpm"
# Save tmux sessions manually with `prefix + C-s` (save) and `prefix + C-r`
# (restore) .
set -g @plugin "tmux-plugins/tmux-resurrect"
	# Restore what was readable in each pane.
	set -g @resurrect-capture-pane-contents 'on'
# Save tmux sessions automatically (requires tmux-resurrect).
set -g @plugin "tmux-plugins/tmux-continuum"
# Fuzzy-find words in tmux buffer. Replaces our previous use of tmux-thumbs.
set -g @plugin 'laktak/extrakto'
	# Set the key chord (in the root key-table) used to call extrakto. The
	# "upstream recommended" way is to just set the setting like this:
	#
	#   set -g @extrakto_key <KEY>
	#
	# but this in turn sets the binding in the `prefix` key table, which is not
	# what we want. So we set our own binding here directly.
	set -g @extrakto_key none
	bind-key -T root         C-M-y      run-shell "~/.tmux/plugins/extrakto/scripts/open.sh \"#{pane_id}\""
	# Force using a split (so that we don't obscure what we want to grab).
	set -g @extrakto_split_direction 'v'
	set -g @extrakto_copy_key "tab"      # use tab to copy to clipboard
	set -g @extrakto_insert_key "enter"  # use enter to insert selection
	set -g @extrakto_clip_tool_run "fg"
	set -g @extrakto_clip_tool "~/syscfg/script/osc52"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run "~/.tmux/plugins/tpm/tpm"
