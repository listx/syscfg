set nocp " take the Vi straitjacket off
set ffs=unix,dos " prefer unix newlines whenever possible, but let dos be dos
set nobackup
" default tabstop and shiftwidths
set tabstop=4
set shiftwidth=4
set expandtab
" Backspace works in Insert mode (e.g. not inserting a ^?), but won't delete
" over line breaks, or automatically-inserted indentation, or the place where
" insert mode started. Use backspace=2 to solve this from
" http://vim.wikia.com/wiki/Backspace_and_delete_problems.
" This is only necessary because of the funny backspace behavior in Nixos.
set backspace=2

" When the page starts to scroll, keep the cursor 3 lines from the top and 3
" lines from the bottom (i.e., keep the cursor with at least 3 lines of
" context)
set scrolloff=3

" place help page on its own tab
cabbrev help tab h

" Always display status line.
set laststatus=2
syntax enable "enable syntax highlighting
set hlsearch "turn on search highlighting
filetype indent on "turn on automatic indenting based on filetype recognition
filetype plugin on "automatically load the corresponding filetype plugin if we've detected a filetype

set incsearch " search any match IMMEDIATELY

set mousehide " hide the mouse cursor when typing (only for GVIM)

set guioptions-=T  "remove toolbar
set guioptions-=m  "remove menu
 "remove scrollbars
set guioptions-=l
set guioptions-=r
 "remove scrollbars when there is a vertically split window
set guioptions-=L
set guioptions-=R
set lbr "for word wrapping to be based on words, not characters
set gfn=Terminus\ 9
set cursorline " highlight cursor horizontally
set background=dark
" so zenburn's background is properly loaded ... 2008/12/23
set t_Co=256

" Turn off blinking for the n, v, & c states:
"let &guicursor = substitute(&guicursor, "n-v-c:", "n-v-c:blinkon0-", "")
" NOTE: To stop all blinking:
" let &guicursor = &guicursor . ",a:blinkon0"
set guicursor+=a:block-blinkon0 "make cursor look square, and prevent cursor blinking

" Set maximum number of tabs on startup to 50, instead of the default 10
"
" If you exceed the number of tabs allowed by tabpagemax Vim will simply open the maximum number of tabs, and the other files will be open but not displayed. You can edit the remaining files by using the :next or :last command to move to the files that are not displayed in a tab. Note that this setting only applies to the maximum number of tabs Vim will open on startup -- you can still open more tabs during your Vim session.
set tabpagemax=50

" wait 1 second instead of 0.5 seconds before erasing any "half-finished"
" commands in normal/visual mode
"
set timeoutlen=1000

" leader key (works with Intellij IDEA's Vim plugin)
let mapleader = ","

" we only want to load autocommands ONCE (esp. for gvim, which sources the
" vimrc
if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    " Integration with my "nox" program.
    au BufEnter * nmap <leader>c !!nox<cr>
    au BufEnter * vmap <leader>c !nox<cr>
    au BufEnter * nmap <leader>C !!nox -u<cr>
    au BufEnter * vmap <leader>C !nox -u<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp nmap <leader>c1 !!nox -l c<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp vmap <leader>c1 !nox -l c<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp nmap <leader>CC !!nox -l c -u<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp vmap <leader>CC !nox -l c -u<cr>
    au BufEnter *.ly,*.tex nmap <leader>c1 !!nox -l tex<cr>
    au BufEnter *.ly,*.tex vmap <leader>c1 !nox -l tex<cr>
    au BufEnter *.ly,*.tex nmap <leader>CC !!nox -l tex -u<cr>
    au BufEnter *.ly,*.tex vmap <leader>CC !nox -l tex -u<cr>
    au BufEnter *.hs nmap <leader>c1 !!nox -l hs<cr>
    au BufEnter *.hs vmap <leader>c1 !nox -l hs<cr>
    au BufEnter *.hs nmap <leader>CC !!nox -l hs -u<cr>
    au BufEnter *.hs vmap <leader>CC !nox -l hs -u<cr>

    " highlight red any trailing whitespace
    highlight ExtraWhitespace ctermbg=red guibg=red
    au ColorScheme * highlight ExtraWhitespace guibg=red
    au BufEnter * match ExtraWhitespace /\s\+$/
    au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    au InsertLeave * match ExtraWhiteSpace /\s\+$/

    " always run highlighting regex from the beginning of the file, not just
    " what is displayed on-screen (useful for multiline highlighting patterns)
    au BufEnter *.hs :syntax sync fromstart
endif

" quick copy and paste from CLIPBOARD ("+y and "+p)
vmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>P "+P

" Change K from being mapped to interactive man pages to being used as the
" vanilla comma ',' key's functionality (intra-line backwards search repeat for
" any t, T, f, F searches).
nnoremap K ,
vnoremap K ,

" quicksave files
nmap <leader>w :up<cr>
" force save
nmap <leader>W :w<cr>

" exit
nmap <leader>q :q<cr>
nmap <leader>Q :q!<cr>

" save and exit (equivalent to "ZZ")
nmap <leader>x :x<cr>

" Use <F10> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F10>

" move across tabs
nnoremap <C-l> :tabnext<cr>
nnoremap <C-h> :tabprevious<cr>
inoremap <C-l> <esc>:tabnext<cr>
inoremap <C-h> <esc>:tabprevious<cr>

" window movement (i.e., moving around INSIDE a tab)
nmap <Tab> <C-w><C-w>

" buffer movement (i.e., moving around INSIDE a window)
nmap <S-h> :bn<cr>
nmap <S-l> :bp<cr>

" faster access to normal mode
imap kj <esc>

nnoremap <space> 10jzz
nnoremap <backspace> 10kzz
vnoremap <space> 10jzz
vnoremap <backspace> 10kzz

" create a new blank tab
nmap <leader>n :tabe<cr>
" create a new tab showing the contents of the current directory
nmap <leader>N :tabe<space>.<cr>

" horizontally/vertically split current window
nmap <leader>h :sp<cr>
nmap <leader>H :sp<space>.<cr>
nmap <leader>v :vsp<cr>
nmap <leader>V :vsp<space>.<cr>

" vim: syntax=vim
