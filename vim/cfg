" Remove Vi compatibility. No one cares about this.
set nocp

" Prefer unix newlines whenever possible, but leave DOS files be DOS
" (don't change their line endings).
set ffs=unix,dos

" Disable backups, because we don't do any serious work in Vim. Plus we save
" incessantly.
set nobackup

" Default tabstop and shiftwidths.
set tabstop=4
set shiftwidth=4
set expandtab

" Backspace works in Insert mode (e.g. not inserting a ^?), but won't delete
" over line breaks, or automatically-inserted indentation, or the place where
" insert mode started. Use backspace=2 to solve this from
" http://vim.wikia.com/wiki/Backspace_and_delete_problems.
" This is only necessary because of the funny backspace behavior in Nixos.
set backspace=2

" When the page starts to scroll, keep the cursor 3 lines from the top and 3
" lines from the bottom (i.e., keep the cursor with at least 3 lines of
" context)
set scrolloff=3

" Place help page on its own tab.
cabbrev help tab h

" Always display status line.
set laststatus=2

" Turn on automatic indenting based on filetype recognition.
filetype indent on

" Automatically load the corresponding filetype plugin if we've detected a filetype.
filetype plugin on

" Hide the mouse cursor when typing (only for GVIM).
set mousehide

" Remove mouse-friendly options from GUI, because we simply don't use the mouse when
" in Vim.
set guioptions-=T
set guioptions-=m
set guioptions-=l
set guioptions-=r
set guioptions-=L
set guioptions-=R

" Enable syntax highlighting.
syntax enable

" Turn on search highlighting.
set hlsearch

" Search any match IMMEDIATELY.
set incsearch

" Set GUI font.
set gfn=Terminus\ 9

" Highlight cursor horizontally.
set cursorline
set background=dark
" Force 256 colors.
set t_Co=256

" Word-wrap based on words, not characters (would anyone on Earth want it the other
" way?
set lbr

" Make cursor look square, and prevent cursor blinking.
set guicursor+=a:block-blinkon0

" Set maximum number of tabs on startup to 50, instead of the default 10.
set tabpagemax=50

" Wait 1 second instead of 0.5 seconds before erasing any "half-finished"
" commands in normal/visual mode.
set timeoutlen=1000

" Leader key (works with Intellij IDEA's Vim plugin).
let mapleader = ","

" We only want to load autocommands ONCE (esp. for GVim, which sources the
" Vimrc.
if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    " Integration with my "nox" program.
    au BufEnter * nmap <leader>c !!nox<cr>
    au BufEnter * vmap <leader>c !nox<cr>
    au BufEnter * nmap <leader>C !!nox -u<cr>
    au BufEnter * vmap <leader>C !nox -u<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp nmap <leader>c1 !!nox -l c<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp vmap <leader>c1 !nox -l c<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp nmap <leader>CC !!nox -l c -u<cr>
    au BufEnter *.c,*.cpp,*.h,*.hpp vmap <leader>CC !nox -l c -u<cr>
    au BufEnter *.ly,*.tex nmap <leader>c1 !!nox -l tex<cr>
    au BufEnter *.ly,*.tex vmap <leader>c1 !nox -l tex<cr>
    au BufEnter *.ly,*.tex nmap <leader>CC !!nox -l tex -u<cr>
    au BufEnter *.ly,*.tex vmap <leader>CC !nox -l tex -u<cr>
    au BufEnter *.hs nmap <leader>c1 !!nox -l hs<cr>
    au BufEnter *.hs vmap <leader>c1 !nox -l hs<cr>
    au BufEnter *.hs nmap <leader>CC !!nox -l hs -u<cr>
    au BufEnter *.hs vmap <leader>CC !nox -l hs -u<cr>

    " highlight red any trailing whitespace
    highlight ExtraWhitespace ctermbg=red guibg=red
    au ColorScheme * highlight ExtraWhitespace guibg=red
    au BufEnter * match ExtraWhitespace /\s\+$/
    au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
    au InsertLeave * match ExtraWhiteSpace /\s\+$/

    " always run highlighting regex from the beginning of the file, not just
    " what is displayed on-screen (useful for multiline highlighting patterns)
    au BufEnter *.hs :syntax sync fromstart
endif

" Quick copy and paste from CLIPBOARD ("+y and "+p).
vmap <leader>y "+y
nmap <leader>p "+p
nmap <leader>P "+P

" Change K from being mapped to interactive man pages to being used as the
" vanilla comma ',' key's functionality (intra-line backwards search repeat for
" any t, T, f, F searches).
nnoremap K ,
vnoremap K ,

" Quicksave files.
nmap <leader>w :up<cr>
" Force save.
nmap <leader>W :w<cr>

" Exit.
nmap <leader>q :q<cr>
nmap <leader>Q :q!<cr>

" Save and exit (equivalent to "ZZ").
nmap <leader>x :x<cr>

" Use <F10> to toggle between 'paste' and 'nopaste'.
set pastetoggle=<F10>

" Move across tabs.
nnoremap <C-l> :tabnext<cr>
nnoremap <C-h> :tabprevious<cr>
inoremap <C-l> <esc>:tabnext<cr>
inoremap <C-h> <esc>:tabprevious<cr>

" Window movement (i.e., moving around INSIDE a tab).
nmap <Tab> <C-w><C-w>

" Buffer movement (i.e., moving around INSIDE a window).
nmap <S-h> :bn<cr>
nmap <S-l> :bp<cr>

" Faster access to normal mode.
imap kj <esc>

" Faster vertical buffer navigation.
nnoremap <space> 10jzz
nnoremap <backspace> 10kzz
vnoremap <space> 10jzz
vnoremap <backspace> 10kzz

" Create a new blank tab.
nmap <leader>n :tabe<cr>

" Horizontally/vertically split current window.
nmap <leader>h :sp<cr>
nmap <leader>H :sp<space>.<cr>
nmap <leader>v :vsp<cr>
nmap <leader>V :vsp<space>.<cr>

" vim: syntax=vim
