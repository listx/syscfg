# Run this when we open this buffer, so that we don't format away the nice
# alignments for each keybinding.
#
#   (format-all-mode -1)

key_bindings:
  # Bindings for Alacritty itself ---------------------------------------------

  # When exiting Vi mode, scroll to the very bottom first to restore
  # pre-Vi-mode context.
  - { key: Q,         mode:  Vi,                      action: ScrollToBottom   }
  - { key: Q,         mode:  Vi,                      action: ToggleViMode     }

  # Quick navigation. This is like 10j or 10k in Vim's normal mode, but with one
  # keystroke.
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Back,      mode:  Vi,                      action: Up               }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }
  - { key: Space,     mode:  Vi,                      action: Down             }

  - { key: Key0,                 mods: Super,         action: ResetFontSize    }
  - { key: Equals,               mods: Super,         action: IncreaseFontSize }
  - { key: Minus,                mods: Super,         action: DecreaseFontSize }

  - { key: C,                    mods: Super,         action: Copy             }
  - { key: V,                    mods: Super,         action: Paste            }
  - { key: Y,         mode: ~Vi, mods: Super,         action: ToggleViMode     }
  - { key: P,                    mods: Super,         action: Paste            }

  # Distinguish between problematic keys (such as C-<key> and C-S-<key>) via
  # manual `CSI u` support. See https://iterm2.com/documentation-csiu.html for a
  # background around `CSI u` aka `libtickit`, and
  # https://github.com/alacritty/alacritty/issues/3101 for the upstream issue to
  # enable native `CSI u` support in Alacritty.
  #
  # The list
  # here is drawn from
  # https://github.com/alexherbo2/alacritty-extended-keys/blob/bc08749ae8fd9f8e00d0c93f96d5c67c244c6480/keys.yml#L16.

  # M-{a-z} -------------------------------------------------------------------

  # We cannot use `CSI u` mode bindings for plain M-{a-z} combinations because
  # then we break legacy programs (e.g., Zsh). The same thing goes for M-{A-Z},
  # C-{a-z}, and C-M-{a-z} combinations. By default these keys are already
  # "bound" this way in Alacritty, but we list them here for sake of
  # completeness.

  - { key: A, mods: Alt, chars: "\x1ba" }
  - { key: B, mods: Alt, chars: "\x1bb" }
  - { key: C, mods: Alt, chars: "\x1bc" }
  - { key: D, mods: Alt, chars: "\x1bd" }
  - { key: E, mods: Alt, chars: "\x1be" }
  - { key: F, mods: Alt, chars: "\x1bf" }
  - { key: G, mods: Alt, chars: "\x1bg" }
  - { key: H, mods: Alt, chars: "\x1bh" }
  - { key: I, mods: Alt, chars: "\x1bi" }
  - { key: J, mods: Alt, chars: "\x1bj" }
  - { key: K, mods: Alt, chars: "\x1bk" }
  - { key: L, mods: Alt, chars: "\x1bl" }
  - { key: M, mods: Alt, chars: "\x1bm" }
  - { key: N, mods: Alt, chars: "\x1bn" }
  - { key: O, mods: Alt, chars: "\x1bo" }
  - { key: P, mods: Alt, chars: "\x1bp" }
  - { key: Q, mods: Alt, chars: "\x1bq" }
  - { key: R, mods: Alt, chars: "\x1br" }
  - { key: S, mods: Alt, chars: "\x1bs" }
  - { key: T, mods: Alt, chars: "\x1bt" }
  - { key: U, mods: Alt, chars: "\x1bu" }
  - { key: V, mods: Alt, chars: "\x1bv" }
  - { key: W, mods: Alt, chars: "\x1bw" }
  - { key: X, mods: Alt, chars: "\x1bx" }
  - { key: Y, mods: Alt, chars: "\x1by" }
  - { key: Z, mods: Alt, chars: "\x1bz" }

  # M-{A-Z} -------------------------------------------------------------------

  - { key: A, mods: Alt|Shift, chars: "\x1bA" }
  - { key: B, mods: Alt|Shift, chars: "\x1bB" }
  - { key: C, mods: Alt|Shift, chars: "\x1bC" }
  - { key: D, mods: Alt|Shift, chars: "\x1bD" }
  - { key: E, mods: Alt|Shift, chars: "\x1bE" }
  - { key: F, mods: Alt|Shift, chars: "\x1bF" }
  - { key: G, mods: Alt|Shift, chars: "\x1bG" }
  - { key: H, mods: Alt|Shift, chars: "\x1bH" }
  - { key: I, mods: Alt|Shift, chars: "\x1bI" }
  - { key: J, mods: Alt|Shift, chars: "\x1bJ" }
  - { key: K, mods: Alt|Shift, chars: "\x1bK" }
  - { key: L, mods: Alt|Shift, chars: "\x1bL" }
  - { key: M, mods: Alt|Shift, chars: "\x1bM" }
  - { key: N, mods: Alt|Shift, chars: "\x1bN" }
  - { key: O, mods: Alt|Shift, chars: "\x1bO" }
  - { key: P, mods: Alt|Shift, chars: "\x1bP" }
  - { key: Q, mods: Alt|Shift, chars: "\x1bQ" }
  - { key: R, mods: Alt|Shift, chars: "\x1bR" }
  - { key: S, mods: Alt|Shift, chars: "\x1bS" }
  - { key: T, mods: Alt|Shift, chars: "\x1bT" }
  - { key: U, mods: Alt|Shift, chars: "\x1bU" }
  - { key: V, mods: Alt|Shift, chars: "\x1bV" }
  - { key: W, mods: Alt|Shift, chars: "\x1bW" }
  - { key: X, mods: Alt|Shift, chars: "\x1bX" }
  - { key: Y, mods: Alt|Shift, chars: "\x1bY" }
  - { key: Z, mods: Alt|Shift, chars: "\x1bZ" }

  # C-{a-z} -------------------------------------------------------------------

  - { key: A, mods: Control, chars: "\x01" }
  - { key: B, mods: Control, chars: "\x02" }
  - { key: C, mods: Control, chars: "\x03" }
  - { key: D, mods: Control, chars: "\x04" }
  - { key: E, mods: Control, chars: "\x05" }
  - { key: F, mods: Control, chars: "\x06" }
  - { key: G, mods: Control, chars: "\x07" }
  - { key: H, mods: Control, chars: "\x08" }
  - { key: I, mods: Control, chars: "\x1b[24~\x09" }
  - { key: J, mods: Control, chars: "\x0a" }
  - { key: K, mods: Control, chars: "\x0b" }
  - { key: L, mods: Control, chars: "\x0c" }
  - { key: M, mods: Control, chars: "\x1b[24~\x0d" }
  - { key: N, mods: Control, chars: "\x0e" }
  - { key: O, mods: Control, chars: "\x0f" }
  - { key: P, mods: Control, chars: "\x10" }
  - { key: Q, mods: Control, chars: "\x11" }
  - { key: R, mods: Control, chars: "\x12" }
  - { key: S, mods: Control, chars: "\x13" }
  - { key: T, mods: Control, chars: "\x14" }
  - { key: U, mods: Control, chars: "\x15" }
  - { key: V, mods: Control, chars: "\x16" }
  - { key: W, mods: Control, chars: "\x17" }
  - { key: X, mods: Control, chars: "\x18" }
  - { key: Y, mods: Control, chars: "\x19" }
  - { key: Z, mods: Control, chars: "\x1a" }

  # C-S-{a-z} -----------------------------------------------------------------

  - { key: A, mods: Control|Shift, chars: "\x1b[97;6u" }
  - { key: B, mods: Control|Shift, chars: "\x1b[98;6u" }
  - { key: C, mods: Control|Shift, chars: "\x1b[99;6u" }
  - { key: D, mods: Control|Shift, chars: "\x1b[100;6u" }
  - { key: E, mods: Control|Shift, chars: "\x1b[101;6u" }
  - { key: F, mods: Control|Shift, chars: "\x1b[102;6u" }
  - { key: G, mods: Control|Shift, chars: "\x1b[103;6u" }
  - { key: H, mods: Control|Shift, chars: "\x1b[104;6u" }
  - { key: I, mods: Control|Shift, chars: "\x1b[105;6u" }
  - { key: J, mods: Control|Shift, chars: "\x1b[106;6u" }
  - { key: K, mods: Control|Shift, chars: "\x1b[107;6u" }
  - { key: L, mods: Control|Shift, chars: "\x1b[108;6u" }
  - { key: M, mods: Control|Shift, chars: "\x1b[109;6u" }
  - { key: N, mods: Control|Shift, chars: "\x1b[110;6u" }
  - { key: O, mods: Control|Shift, chars: "\x1b[111;6u" }
  - { key: P, mods: Control|Shift, chars: "\x1b[112;6u" }
  - { key: Q, mods: Control|Shift, chars: "\x1b[113;6u" }
  - { key: R, mods: Control|Shift, chars: "\x1b[114;6u" }
  - { key: S, mods: Control|Shift, chars: "\x1b[115;6u" }
  - { key: T, mods: Control|Shift, chars: "\x1b[116;6u" }
  - { key: U, mods: Control|Shift, chars: "\x1b[117;6u" }
  - { key: V, mods: Control|Shift, chars: "\x1b[118;6u" }
  - { key: W, mods: Control|Shift, chars: "\x1b[119;6u" }
  - { key: X, mods: Control|Shift, chars: "\x1b[120;6u" }
  - { key: Y, mods: Control|Shift, chars: "\x1b[121;6u" }
  - { key: Z, mods: Control|Shift, chars: "\x1b[122;6u" }

  # C-M-{a-z} -----------------------------------------------------------------

  # Alt is interpreted as a leading ESC, and the Control modifier shifts the
  # ASCII codepoint by -64. This is why, e.g., 'A' (ASCII codepoint 65) becomes
  # codepoint 1.

  - { key: A, mods: Control|Alt, chars: "\x1b\x01" }
  - { key: B, mods: Control|Alt, chars: "\x1b\x02" }
  - { key: C, mods: Control|Alt, chars: "\x1b\x03" }
  - { key: D, mods: Control|Alt, chars: "\x1b\x04" }
  - { key: E, mods: Control|Alt, chars: "\x1b\x05" }
  - { key: F, mods: Control|Alt, chars: "\x1b\x06" }
  - { key: G, mods: Control|Alt, chars: "\x1b\x07" }
  - { key: H, mods: Control|Alt, chars: "\x1b\x08" }
  - { key: I, mods: Control|Alt, chars: "\x1b\x09" }
  - { key: J, mods: Control|Alt, chars: "\x1b\x0a" }
  - { key: K, mods: Control|Alt, chars: "\x1b\x0b" }
  - { key: L, mods: Control|Alt, chars: "\x1b\x0c" }
  - { key: M, mods: Control|Alt, chars: "\x1b\x0d" }
  - { key: N, mods: Control|Alt, chars: "\x1b\x0e" }
  - { key: O, mods: Control|Alt, chars: "\x1b\x0f" }
  - { key: P, mods: Control|Alt, chars: "\x1b\x10" }
  - { key: Q, mods: Control|Alt, chars: "\x1b\x11" }
  - { key: R, mods: Control|Alt, chars: "\x1b\x12" }
  - { key: S, mods: Control|Alt, chars: "\x1b\x13" }
  - { key: T, mods: Control|Alt, chars: "\x1b\x14" }
  - { key: U, mods: Control|Alt, chars: "\x1b\x15" }
  - { key: V, mods: Control|Alt, chars: "\x1b\x16" }
  - { key: W, mods: Control|Alt, chars: "\x1b\x17" }
  - { key: X, mods: Control|Alt, chars: "\x1b\x18" }
  - { key: Y, mods: Control|Alt, chars: "\x1b\x19" }
  - { key: Z, mods: Control|Alt, chars: "\x1b\x1a" }

  # C-M-S-{a-z} ---------------------------------------------------------------

  # Note that as a convention we reserve C-M-S- (as well as C-M-) to tmux
  # keybindings. So these bindings rarely get used by other CLI programs that we
  # use (because we don't like having the same bindings do different things
  # based on whether we're running inside tmux or not).

  - { key: A, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[97;8u" }
  - { key: B, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[98;8u" }
  - { key: C, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[99;8u" }
  - { key: D, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[100;8u" }
  - { key: E, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[101;8u" }
  - { key: F, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[102;8u" }
  - { key: G, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[103;8u" }
  - { key: H, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[104;8u" }
  - { key: I, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[105;8u" }
  - { key: J, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[106;8u" }
  - { key: K, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[107;8u" }
  - { key: L, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[108;8u" }
  - { key: M, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[109;8u" }
  - { key: N, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[110;8u" }
  - { key: O, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[111;8u" }
  - { key: P, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[112;8u" }
  - { key: Q, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[113;8u" }
  - { key: R, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[114;8u" }
  - { key: S, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[115;8u" }
  - { key: T, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[116;8u" }
  - { key: U, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[117;8u" }
  - { key: V, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[118;8u" }
  - { key: W, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[119;8u" }
  - { key: X, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[120;8u" }
  - { key: Y, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[121;8u" }
  - { key: Z, mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[122;8u" }

  # (Normally) dead keys. Bring them back to life with `CSI u` sequences!
  #
  # Note that these bindings are limited to what tmux is able to understand. For
  # example, we cannot send "\x1b[34;5u" (C-") because tmux is unable to parse
  # it. So we instead send "\x1b[39;6u" (C-S-') instead.
  # ---------------------------------------------------------------------------

  - { key: Key1,       mods: Control|Shift, chars: "\x1b[33;5u" }  # C-!
  - { key: Apostrophe, mods: Control|Shift, chars: "\x1b[39;6u" }  # C-" (C-S-')
  - { key: Key3,       mods: Control|Shift, chars: "\x1b[35;5u" }  # C-#
  - { key: Key4,       mods: Control|Shift, chars: "\x1b[52;6u" }  # C-$ (C-S-4)
  - { key: Key5,       mods: Control|Shift, chars: "\x1b[53;6u" }  # C-% (C-S-5)
  - { key: Key7,       mods: Control|Shift, chars: "\x1b[55;6u" }  # C-& (C-S-7)
  - { key: Apostrophe, mods: Control,       chars: "\x1b[39;5u" }  # C-'
  - { key: Key9,       mods: Control|Shift, chars: "\x1b[40;5u" }  # C-(
  - { key: Key0,       mods: Control|Shift, chars: "\x1b[41;5u" }  # C-)
  - { key: Key8,       mods: Control|Shift, chars: "\x1b[56;6u" }  # C-* (C-S-8)
  - { key: Equals,     mods: Control|Shift, chars: "\x1b[43;5u" }  # C-+
  - { key: Comma,      mods: Control,       chars: "\x1b[44;5u" }  # C-,
  - { key: Minus,      mods: Control,       chars: "\x1b[45;5u" }  # C--
  - { key: Period,     mods: Control,       chars: "\x1b[46;5u" }  # C-.
  # See https://github.com/alacritty/alacritty/issues/3014 which describes a bug
  # with Alacritty where C-/ always triggers the system alert sound.
  - { key: Slash,      mods: Control,       chars: "\x1b[47;5u" }  # C-/
  - { key: Key0,       mods: Control,       chars: "\x1b[48;5u" }  # C-0
  # On Mac, we have to manually disable the C-1 and C-2 bindings which are by
  # default bound to switch to Desktops 1 and 2.
  - { key: Key1,       mods: Control,       chars: "\x1b[49;5u" }  # C-1
  - { key: Key2,       mods: Control,       chars: "\x1b[50;5u" }  # C-2
  - { key: Key3,       mods: Control,       chars: "\x1b[51;5u" }  # C-3
  - { key: Key4,       mods: Control,       chars: "\x1b[52;5u" }  # C-4
  - { key: Key5,       mods: Control,       chars: "\x1b[53;5u" }  # C-4
  - { key: Key6,       mods: Control,       chars: "\x1b[54;5u" }  # C-6
  - { key: Key7,       mods: Control,       chars: "\x1b[55;5u" }  # C-7
  - { key: Key8,       mods: Control,       chars: "\x1b[56;5u" }  # C-8
  - { key: Key9,       mods: Control,       chars: "\x1b[57;5u" }  # C-9
  - { key: Semicolon,  mods: Control|Shift, chars: "\x1b[58;5u" }  # C-:
  - { key: Semicolon,  mods: Control,       chars: "\x1b[59;5u" }  # C-;
  - { key: Comma,      mods: Control|Shift, chars: "\x1b[60;5u" }  # C-<
  - { key: Equals,     mods: Control,       chars: "\x1b[61;5u" }  # C-=
  - { key: Period,     mods: Control|Shift, chars: "\x1b[62;5u" }  # C->
  - { key: Slash,      mods: Control|Shift, chars: "\x1b[47;6u" }  # C-? (C-S-/)
  # C-@ (that is, C-S-2) by default sends the NUL character. This is pretty much
  # useless so we create a separate mapping here.
  - { key: Key2,       mods: Control|Shift, chars: "\x1b[24~\x1b[64;5u" } # C-@

  # C-A to C-Z (codepoints 65-90) are handled already above.
  #
  # Don't make C-[ map to ESC, because we never use it that way. Again, we
  # rebind this from tmux to be the `CSI u` encoded version. (This is the same
  # method we use to map C-i (to be different from TAB)).
  # 
  # For simplicity we handle all variations of the problematic "[" key here
  # (usually conflicts with Escape).
  - { key: LBracket,   mods: Alt,               chars: "\x1b[24~\x1b[91;3u" }  # M-[
  - { key: LBracket,   mods: Alt|Shift,         chars: "\x1b[24~\x1b[91;4u" }  # M-S-[
  - { key: LBracket,   mods: Control,           chars: "\x1b[24~\x1b[91;5u" }  # C-[
  - { key: LBracket,   mods: Control|Shift,     chars: "\x1b[24~\x1b[91;6u" }  # C-S-[
  - { key: LBracket,   mods: Control|Alt,       chars: "\x1b[24~\x1b[91;7u" }  # C-M-[
  - { key: LBracket,   mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[91;8u" }  # C-M-S-[

  # C-\ by default sends 0x1c, which is the FS (file separator) key. See
  # https://en.wikipedia.org/wiki/Control-%5C. Most UNIX programs interpret this
  # as a SIGQUIT, but in Emacs it's the default keystroke mapping for
  # toggle-input-method.
  #
  # Anyway, there is almost never a need to send SIGQUIT to any program these
  # days. The C-], C-^, and C-_ bindings send the group separator, record
  # separator, and unit separator codepoints, which aren't really used by most
  # CLI programs these days, so we remap them.
  - { key: Backslash,  mods: Control,       chars: "\x1b[92;5u" }  # C-\
  - { key: RBracket,   mods: Control,       chars: "\x1b[93;5u" }  # C-]
  - { key: Key6,       mods: Control|Shift, chars: "\x1b[94;5u" }  # C-^
  - { key: Minus,      mods: Control|Shift, chars: "\x1b[95;5u" }  # C-_
  - { key: Grave,      mods: Control,       chars: "\x1b[96;5u" }  # C-`
  - { key: Backslash,  mods: Control|Shift, chars: "\x1b[92;6u" }  # C-| (C-S-\)
  - { key: RBracket,   mods: Control|Shift, chars: "\x1b[93;6u" }  # C-} (C-S-])
  - { key: Grave,      mods: Control|Shift, chars: "\x1b[96;6u" }  # C-~ (C-S-`)

  - { key: Key1,       mods: Alt|Shift, chars: "\x1b[33;3u" }  # M-!
  - { key: Apostrophe, mods: Alt|Shift, chars: "\x1b[39;4u" }  # M-" (M-S-')
  - { key: Key3,       mods: Alt|Shift, chars: "\x1b[35;3u" }  # M-#
  - { key: Key4,       mods: Alt|Shift, chars: "\x1b[52;4u" }  # M-$ (M-S-4)
  - { key: Key5,       mods: Alt|Shift, chars: "\x1b[53;4u" }  # M-% (M-S-5)
  - { key: Key7,       mods: Alt|Shift, chars: "\x1b[55;4u" }  # M-& (M-S-7)
  - { key: Apostrophe, mods: Alt,       chars: "\x1b[39;3u" }  # M-'
  - { key: Key9,       mods: Alt|Shift, chars: "\x1b[40;3u" }  # M-(
  - { key: Key0,       mods: Alt|Shift, chars: "\x1b[41;3u" }  # M-)
  - { key: Key8,       mods: Alt|Shift, chars: "\x1b[56;4u" }  # M-* (M-S-8)
  - { key: Equals,     mods: Alt|Shift, chars: "\x1b[43;3u" }  # M-+
  - { key: Comma,      mods: Alt,       chars: "\x1b[44;3u" }  # M-,
  - { key: Minus,      mods: Alt,       chars: "\x1b[45;3u" }  # M--
  - { key: Period,     mods: Alt,       chars: "\x1b[46;3u" }  # M-.
  - { key: Slash,      mods: Alt,       chars: "\x1b[47;3u" }  # M-/
  - { key: Key0,       mods: Alt,       chars: "\x1b[48;3u" }  # M-0
  - { key: Key1,       mods: Alt,       chars: "\x1b[49;3u" }  # M-1
  - { key: Key2,       mods: Alt,       chars: "\x1b[50;3u" }  # M-2
  - { key: Key3,       mods: Alt,       chars: "\x1b[51;3u" }  # M-3
  - { key: Key4,       mods: Alt,       chars: "\x1b[52;3u" }  # M-4
  - { key: Key5,       mods: Alt,       chars: "\x1b[53;3u" }  # M-4
  - { key: Key6,       mods: Alt,       chars: "\x1b[54;3u" }  # M-6
  - { key: Key7,       mods: Alt,       chars: "\x1b[55;3u" }  # M-7
  - { key: Key8,       mods: Alt,       chars: "\x1b[56;3u" }  # M-8
  - { key: Key9,       mods: Alt,       chars: "\x1b[57;3u" }  # M-9
  - { key: Semicolon,  mods: Alt|Shift, chars: "\x1b[58;3u" }  # M-:
  - { key: Semicolon,  mods: Alt,       chars: "\x1b[59;3u" }  # M-;
  - { key: Comma,      mods: Alt|Shift, chars: "\x1b[60;3u" }  # M-<
  - { key: Equals,     mods: Alt,       chars: "\x1b[61;3u" }  # M-=
  - { key: Period,     mods: Alt|Shift, chars: "\x1b[62;3u" }  # M->
  - { key: Slash,      mods: Alt|Shift, chars: "\x1b[47;4u" }  # M-? (M-S-/)
  - { key: Key2,       mods: Alt|Shift, chars: "\x1b[64;3u" }  # M-@
  # Codes 65-90 are A-Z.
  - { key: Backslash,  mods: Alt,       chars: "\x1b[92;3u" }  # M-\
  - { key: RBracket,   mods: Alt,       chars: "\x1b[93;3u" }  # M-]
  - { key: Key6,       mods: Alt|Shift, chars: "\x1b[94;3u" }  # M-^
  - { key: Minus,      mods: Alt|Shift, chars: "\x1b[95;3u" }  # M-_
  - { key: Grave,      mods: Alt,       chars: "\x1b[96;3u" }  # M-`
  # Codes 97-122 are a-z.
  - { key: Backslash,  mods: Alt|Shift, chars: "\x1b[92;4u" }  # M-| (M-S-\)
  - { key: RBracket,   mods: Alt|Shift, chars: "\x1b[93;4u" }  # M-} (M-S-])
  - { key: Grave,      mods: Alt|Shift, chars: "\x1b[96;4u" }  # M-~ (M-S-`)

  - { key: Key1,       mods: Control|Alt|Shift, chars: "\x1b[33;7u" }  # C-M-!
  - { key: Apostrophe, mods: Control|Alt|Shift, chars: "\x1b[39;8u" }  # C-M-" (C-M-S-')
  - { key: Key3,       mods: Control|Alt|Shift, chars: "\x1b[35;7u" }  # C-M-#
  - { key: Key4,       mods: Control|Alt|Shift, chars: "\x1b[52;8u" }  # C-M-$ (C-M-S-4)
  - { key: Key5,       mods: Control|Alt|Shift, chars: "\x1b[53;8u" }  # C-M-% (C-M-S-5)
  - { key: Key7,       mods: Control|Alt|Shift, chars: "\x1b[55;8u" }  # C-M-& (C-M-S-7)
  - { key: Apostrophe, mods: Control|Alt,       chars: "\x1b[39;7u" }  # C-M-'
  - { key: Key9,       mods: Control|Alt|Shift, chars: "\x1b[40;7u" }  # C-M-(
  - { key: Key0,       mods: Control|Alt|Shift, chars: "\x1b[41;7u" }  # C-M-)
  - { key: Key8,       mods: Control|Alt|Shift, chars: "\x1b[42;8u" }  # C-M-* (C-M-S-8)
  - { key: Equals,     mods: Control|Alt|Shift, chars: "\x1b[43;7u" }  # C-M-+
  - { key: Comma,      mods: Control|Alt,       chars: "\x1b[44;7u" }  # C-M-,
  - { key: Minus,      mods: Control|Alt,       chars: "\x1b[45;7u" }  # C-M--
  - { key: Period,     mods: Control|Alt,       chars: "\x1b[46;7u" }  # C-M-.
  - { key: Slash,      mods: Control|Alt,       chars: "\x1b[47;7u" }  # C-M-/
  - { key: Key0,       mods: Control|Alt,       chars: "\x1b[48;7u" }  # C-M-0
  - { key: Key1,       mods: Control|Alt,       chars: "\x1b[49;7u" }  # C-M-1
  - { key: Key2,       mods: Control|Alt,       chars: "\x1b[50;7u" }  # C-M-2
  - { key: Key3,       mods: Control|Alt,       chars: "\x1b[51;7u" }  # C-M-3
  - { key: Key4,       mods: Control|Alt,       chars: "\x1b[52;7u" }  # C-M-4
  - { key: Key5,       mods: Control|Alt,       chars: "\x1b[53;7u" }  # C-M-4
  - { key: Key6,       mods: Control|Alt,       chars: "\x1b[54;7u" }  # C-M-6
  - { key: Key7,       mods: Control|Alt,       chars: "\x1b[55;7u" }  # C-M-7
  - { key: Key8,       mods: Control|Alt,       chars: "\x1b[56;7u" }  # C-M-8
  - { key: Key9,       mods: Control|Alt,       chars: "\x1b[57;7u" }  # C-M-9
  - { key: Semicolon,  mods: Control|Alt|Shift, chars: "\x1b[58;7u" }  # C-M-:
  - { key: Semicolon,  mods: Control|Alt,       chars: "\x1b[59;7u" }  # C-M-;
  - { key: Comma,      mods: Control|Alt|Shift, chars: "\x1b[60;7u" }  # C-M-<
  - { key: Equals,     mods: Control|Alt,       chars: "\x1b[61;7u" }  # C-M-=
  - { key: Period,     mods: Control|Alt|Shift, chars: "\x1b[62;7u" }  # C-M->
  - { key: Slash,      mods: Control|Alt|Shift, chars: "\x1b[47;8u" }  # C-M-? (C-M-S-/)
  - { key: Key2,       mods: Control|Alt|Shift, chars: "\x1b[64;7u" }  # C-M-@
  # We cannot bind C-M-[ because it conflicts (in tmux) with M-ESC.
  - { key: Backslash,  mods: Control|Alt,       chars: "\x1b[92;7u" }  # C-M-\
  - { key: RBracket,   mods: Control|Alt,       chars: "\x1b[93;7u" }  # C-M-]
  - { key: Key6,       mods: Control|Alt|Shift, chars: "\x1b[94;7u" }  # C-M-^
  - { key: Minus,      mods: Control|Alt|Shift, chars: "\x1b[95;7u" }  # C-M-_
  - { key: Grave,      mods: Control|Alt,       chars: "\x1b[96;7u" }  # C-M-`
  - { key: Backslash,  mods: Control|Alt|Shift, chars: "\x1b[92;8u" }  # C-M-| (C-M-S-\)
  - { key: RBracket,   mods: Control|Alt|Shift, chars: "\x1b[93;8u" }  # C-M-} (C-M-S-])
  - { key: Grave,      mods: Control|Alt|Shift, chars: "\x1b[96;8u" }  # C-M-~ (C-M-S-`)

  # Non-printing or otherwise special keys ------------------------------------

  # Disambiguate various ESC + modifier key chords. We have to use a
  # combination of other keys (\x1d, \x1e, \x1f) in order to avoid buggy
  # overlap with other logic somehwere down the
  # terminal-emulation-key-sequencing-parsing rabbit hole.
  - { key: Escape,   mods: Shift,             chars: "\x1b[24~\x1d" } # S-ESC
  - { key: Escape,   mods: Alt,               chars: "\x1b[24~\x1e" } # M-ESC
  - { key: Escape,   mods: Alt|Shift,         chars: "\x1b[24~\x1f" } # M-S-ESC
  - { key: Escape,   mods: Control,           chars: "\x1b[24~\x1b[27;5u" } # C-ESC
  - { key: Escape,   mods: Control|Shift,     chars: "\x1b[24~\x1b[27;6u" } # C-S-ESC
  - { key: Escape,   mods: Control|Alt,       chars: "\x1b[24~\x1b[27;7u" } # C-M-ESC
  - { key: Escape,   mods: Control|Alt|Shift, chars: "\x1b[24~\x1b[27;8u" } # C-M-S-ESC

  # Don't map S-TAB because most terminals (including Alacritty) send "\x1b[Z"
  # for this, and many existing programs interpret this as S-TAB. In Emacs it
  # interprets it as <backtab>.
  #
  # M-TAB is "\x1b\x09" (ESC followed by TAB), so don't map this either.
  #
  # For some reason C-S-TAB sends "\x19" (EM (end of medium)), which can already
  # be sent via C-y, so remap it here.
  - { key: Tab,   mods: Alt|Shift,            chars: "\x1b[9;4u" } # M-S-TAB
  - { key: Tab,   mods: Control,              chars: "\x1b[9;5u" } # C-TAB
  - { key: Tab,   mods: Control|Shift,        chars: "\x1b[9;6u" } # C-S-TAB
  - { key: Tab,   mods: Control|Alt,          chars: "\x1b[9;7u" } # C-M-TAB
  - { key: Tab,   mods: Control|Alt|Shift,    chars: "\x1b[9;8u" } # C-M-S-TAB

  # The Backspace key is mapped to ASCII 127 (DEL), and when we press the delete
  # key, most terminals (including Alacritty) send "\x1b[3~". It's unfortunate
  # that the ASCII codepoint 127 is named DEL, but oh well.
  - { key: Back,   mods: Shift,               chars: "\x1b[24~\x19" } # S-Backspace
  - { key: Back,   mods: Alt,                 chars: "\x1b[127;3u" } # M-Backspace
  - { key: Back,   mods: Alt|Shift,           chars: "\x1b[127;4u" } # M-S-Backspace
  - { key: Back,   mods: Control,             chars: "\x1b[127;5u" } # C-Backspace
  - { key: Back,   mods: Control|Shift,       chars: "\x1b[127;6u" } # C-S-Backspace
  - { key: Back,   mods: Control|Alt,         chars: "\x1b[127;7u" } # C-M-Backspace
  - { key: Back,   mods: Control|Alt|Shift,   chars: "\x1b[127;8u" } # C-M-S-Backspace

  - { key: Return,   mods: Shift,             chars: "\x1b[24~\x1a" } # S-Enter
  - { key: Return,   mods: Alt,               chars: "\x1b[13;3u" } # M-Enter
  - { key: Return,   mods: Alt|Shift,         chars: "\x1b[13;4u" } # M-S-Enter
  - { key: Return,   mods: Control,           chars: "\x1b[13;5u" } # C-Enter
  - { key: Return,   mods: Control|Shift,     chars: "\x1b[13;6u" } # C-S-Enter
  - { key: Return,   mods: Control|Alt,       chars: "\x1b[13;7u" } # C-M-Enter
  - { key: Return,   mods: Control|Alt|Shift, chars: "\x1b[13;8u" } # C-M-S-Enter

  # C-Space sends the NUL byte ("\x00") in Alacritty, but in tmux it just sends
  # the regular Space character. So it looks like there is no consensus in
  # terminal programs, so we rebind it here.
  #
  # S-Space is useful to just send the Space character, because we can type
  # capital letters with spaces in-between them without having to lift the Shift
  # key, so don't rebind it.
  - { key: Space,   mods: Alt,               chars: "\x1b[32;3u" } # M-Space
  - { key: Space,   mods: Alt|Shift,         chars: "\x1b[32;4u" } # M-S-Space
  - { key: Space,   mods: Control,           chars: "\x1b[32;5u" } # C-Space
  - { key: Space,   mods: Control|Shift,     chars: "\x1b[32;6u" } # C-S-Space
  - { key: Space,   mods: Control|Alt,       chars: "\x1b[32;7u" } # C-M-Space
  - { key: Space,   mods: Control|Alt|Shift, chars: "\x1b[32;8u" } # C-M-S-Space
