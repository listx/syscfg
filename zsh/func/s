#!/usr/bin/env zsh

# SSH to known machines by attaching (or creating) a session.

s()
{
	if (( $#@ == 0 )); then
		echo >&2 "Usage: <HOST> [TMUX_SESSION_NAME]"
		return 1
	fi

	local user
	local host="${1}"
	# Grab the first subdomain as a short nickname for the host.
	local host_shortname="${host%%.*}"

	# Fix WSL hostname. That is, other computers on the LAN call it "w0", but it
	# knows itself as "DESKTOP-P54E4V0". This affects things like the "hostname"
	# command when invoked locally.
	case "${host_shortname}" in
	w0) host_shortname="DESKTOP-P54E4V0" ;;
	esac

	local session
	local session_suffix="${2:-}"

	if [[ -n "${session_suffix}" ]]; then
		# Remove any existing host prefix from the session. This is to prevent it
		# eventually looking like "HOST-HOST-<SESSION>".
		session_suffix="${session#${host_shortname}-}"

		# Prefix session name with the hostname.
		session="${host_shortname}-${session_suffix:-1}"
	else
		# If the numeric suffix is empty, then that means it was not initially
		# provided. In this case we go with the default option, which is the
		# empty string. That way, tmux.sh will allocate a default name on its
		# own.
		session=""
	fi


	case "${host}" in
	w0) user="ingra" ;;
	*)  user="l" ;;
	esac

	case "${host}" in
	w0)
		ssh -t "${user}@${host}" \"wsl.exe -d NixOS\"
		;;
	*)
		ssh -t "${user}@${host}" '~/syscfg/script/tmux.sh' ${session:+"${session}"}
		;;
	esac
}
