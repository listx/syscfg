#!/usr/bin/env zsh
# "kody" prompt theme.

# The zle-keymap-select and zle-line-finish functions are special widgets that
# are empty by default. We use it to set the Vim-style "<I>" or "<N>" mode
# indicators in the prompt. See "Special Widgets" in zshzle(1).
zle-line-init zle-keymap-select() {
	# After recalculating the indicator, rebuild the prompt before resetting it.
	# Otherwise the prompt itself does not get re-built (it only gets re-printed
	# using the old state).
	set_zsh_keymap_indicator
	construct_prompt
	zle reset-prompt
}
# Create user-defined widgets.
zle -N zle-line-init
zle -N zle-keymap-select

prompt_kody_setup()
{
	typeset -g prompt_newline
	autoload -Uz add-zsh-hook
	prompt_newline=$'\n%{\r%}'

	# Run construct_prompt() after executing precmd().
	add-zsh-hook precmd construct_prompt

	# Make text typed in by the user be displayed as bold text.
	zle_highlight[(r)default:*]="default:fg=default,bold"
}

# The chpwd(), preexec() and precmd() functions are specially recognized by Zsh.
# Normally they are not defined and hence nothing happens.

# preexec() is a hook function under "SPECIAL FUNCTIONS"; it is executed just
# after a command has been read, but before it is executed.
preexec() {
	# We set the ran_something variable to TRUE to indicate that the user typed
	# in a command to be executed.
	global_ran_something=1
}

# precmd() is executed before each prompt.
precmd()
{
	# Catch cases where we press C-c to stop execution (or if we just pressed
	# ENTER after deleting the entire BUFFER); we want to treat such cases as
	# non-error exits. So, if we did not run anything (preexec() did not get
	# executed due to C-c), then assign global_exit_status as 0.
	global_exit_status=$?
	if ! (( $global_ran_something )); then
		global_exit_status=0
	fi
	global_ran_something=0
}

set_zsh_keymap_indicator()
{

	case "${KEYMAP}" in
	vicmd)
		global_keymap_indicator="N"
	;;
	main|viins)
		global_keymap_indicator="I"
	;;
	esac
}

# Python VirtualEnv info.
get_venv_info()
{
	if [[ -n "${VIRTUAL_ENV}" ]]; then
		echo "($(basename "${VIRTUAL_ENV}")) "
	fi
}

get_day()
{
	local day=""
	case $(date +%a) in
		Mon) day+="月" ;;
		Tue) day+="火" ;;
		Wed) day+="水" ;;
		Thu) day+="木" ;;
		Fri) day+="金" ;;
		Sat) day+="土" ;;
		Sun) day+="日" ;;
	esac
	echo "${day}"
}

get_user_host()
{
	local prompt_hostname="%m"
	local prompt_hostname_short="$([[ -f ~/.hostname-short ]] && cat ~/.hostname-short || hostname)"
	if [[ -n "${prompt_hostname_short}" ]]; then
		prompt_hostname="${prompt_hostname_short}"
	fi
	echo "%n@${prompt_hostname} "
}

get_exit_status()
{
	if (( $global_exit_status )); then
		echo "%B%F{red}${global_exit_status}%f%b "
	fi
}

# Set global variables used for prompt generation. This function is only
# executed once. That is, even in cases where we press ESC to enter "Normal"
# mode, we do _not_ call this function.
set_globals()
{
	global_timestamp="%B%K{214}%F{16} %D{%d} $(get_day) %D{%H:%M:%S %Z} %f%k%b "
	global_user_host="$(get_user_host)"
	global_cmd_exit_status="$(get_exit_status)"
	global_venv_info="$(get_venv_info)"
	global_prompt_git="$(gsts for_prompt)"
	global_prompt_path_short="%B%F{cyan}$(~/syscfg/script/simplify_path.sh ${PWD})%f%b"
}

# The actual prompt. This does mostly pure string manipulation as all of the
# data that we want to display has been calculated elsewhere (and set as global
# variables).
#
# The use of global variables here is important because it allows us to avoid
# recalculating costly bits. Practically speaking, we recalculate the keymap
# indicator whenever the user enters or leaves vi mode ("Normal" mode), but we
# do not recalculate the other globals.
construct_prompt()
{
	set_globals

	# Date, time, Zsh keymap indicator, exit code, Git, and VirtualEnv.
	local prompt_line_1="${global_timestamp}<${global_keymap_indicator}> ${global_venv_info}${global_cmd_exit_status}${global_prompt_git}${global_user_host}${global_prompt_path_short}"

	local prompt_line_2=" "

	# PS1 -> what you see by default.
	PS1="${prompt_line_1}${prompt_newline}${prompt_line_2}\$ "

	# PS2 -> what you see when you enter a multi-line shell command.
	PS2="${prompt_line_2}..%_ > "
	# PS3 -> what you see when you are given a selection option screen (e.g.,
	# selecting a directory in the directory stack).
	PS3="${prompt_line_2}?# "
}

prompt_kody_setup "$@"
