--
-- xmonad example config file.
--
-- A template showing all available configuration hooks,
-- and how to override the defaults in your own xmonad.hs conf file.
--
-- Normally, you'd only override those defaults you care about.
--

-- required imports
import XMonad
import Data.Monoid
import System.Exit
import qualified XMonad.StackSet as W
import qualified Data.Map        as M

-- optional imports
import Data.Maybe (isJust, isNothing)
import XMonad.Actions.Warp -- for mouse warping
import XMonad.Actions.GridSelect -- for selecting workspaces, etc. from a 2D, pretty grid
import XMonad.Actions.NoBorders -- for toggling borders on a per-window basis
import XMonad.Actions.CycleWS -- for workspace-to-workspace navigation
import XMonad.Hooks.ManageHelpers -- for doCenterFloat

import XMonad.Layout.NoBorders -- enable borderless layouts
import XMonad.Layout.Circle -- circle layout
import XMonad.Layout.LayoutHints -- for (among other things) removing GVim's dead borders automatically

import XMonad.Util.WorkspaceCompare (getSortByIndex)

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "urxvt"

-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True

-- Width of the window border in pixels.
--
myBorderWidth   = 1

-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt").  You may also consider using mod3Mask
-- ("right alt"), which does not conflict with emacs keybindings. The
-- "windows key" is usually mod4Mask.
-- You can double-check which key is which modmask by running 'xmodmap'
myModMask       = mod3Mask -- use the CAPSLOCK key
altMask         = mod1Mask -- alias "altMask" for left alt key

-- The mask for the numlock key. Numlock status is "masked" from the
-- current modifier status, so the keybindings will work with numlock on or
-- off. You may need to change this on some systems.
--
-- You can find the numlock modifier by running "xmodmap" and looking for a
-- modifier with Num_Lock bound to it:
--
-- > $ xmodmap | grep Num
-- > mod2        Num_Lock (0x4d)
--
-- Set numlockMask = 0 if you don't have a numlock key, or want to treat
-- numlock status separately.
--
myNumlockMask   = mod2Mask

-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--

data MyWSGroup = Net | Work | Play | Misc | Sys | None
    deriving (Eq, Ord, Enum, Show)

-- use an association list for more flexible custom workspace manipulation
myWorkspaceGroups :: [(String, MyWSGroup)]
myWorkspaceGroups = [ ("1",   Net)
                    , ("2",   Net)
                    , ("3",   Work)
                    , ("4",   Work)
                    , ("5",   Work)
                    , ("6",   Work)
                    , ("7",   Work)
                    , ("8",   Work)
                    , ("9",   Work)
                    , ("0",   Play)
                    , ("F1",  Play)
                    , ("F2",  Play)
                    , ("F3",  Play)
                    , ("F4",  Play)
                    , ("F5",  Misc)
                    , ("F6",  Misc)
                    , ("F7",  Misc)
                    , ("F8",  Misc)
                    , ("F9",  Sys)
                    , ("F10", Sys)
                    , ("F11", Sys)
                    , ("F12", Sys)
                    ]

myWorkspaces = map fst myWorkspaceGroups -- 1..9, 0, F1-F12

-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = "#000000"
myFocusedBorderColor = "#ffffff"

-- terminals (various different color themes)
term1 = "~/syscfg/script/sys/terms/wb.sh"
term2 = "~/syscfg/script/sys/terms/bw.sh"
term3 = "~/syscfg/script/sys/terms/wB.sh"

------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $

    -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)

    -- close focused window
    , ((modm,               xK_d     ), kill)

     -- Rotate through the available layout algorithms
    , ((modm,               xK_space ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next window
    , ((modm,               xK_Tab   ), windows W.focusDown)

    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)

    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )

    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)

    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    -- Shrink the master area
    , ((modm,               xK_w     ), sendMessage Shrink)

    -- Expand the master area
    , ((modm,               xK_e     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_Escape     ), io (exitWith ExitSuccess))

    -- Restart xmonad
    , ((modm              , xK_Escape     ), spawn "xmonad --recompile; xmonad --restart")

    -- CUSTOM KEYBINDINGS HERE --

    , ((mod4Mask              , xK_a     ), spawn (term1 ++ " -e ~/sched/mercury.sh todo"))
    , ((mod4Mask .|. shiftMask, xK_a     ), spawn (term1 ++ " -e ~/sched/mercury.sh notes"))
    , ((mod4Mask              , xK_c     ), spawn "galculator")
    , ((mod4Mask .|. shiftMask, xK_c     ), spawn "gcalctool")
    , ((mod4Mask              , xK_d     ), spawn "amule")
    , ((mod4Mask              , xK_e     ), spawn (term1 ++ " -e mutt"))
    , ((mod4Mask .|. shiftMask, xK_f     ), spawn "gnucash")
    , ((mod4Mask              , xK_h     ), spawn (term2 ++ " -e ncmpcpp"))
    , ((mod4Mask .|. shiftMask, xK_h     ), spawn (term2 ++ " -e mplayer -ao oss -softvol -volume 100 -volstep 1 -demuxer ogg -prefer-ipv4 http://192.168.0.110:8000/mpd.ogg"))
    , ((mod4Mask              , xK_i     ), spawn "gimp")
    , ((mod4Mask              , xK_m     ), spawn "blender")
    , ((mod4Mask              , xK_n     ), spawn "firefox")
    , ((mod4Mask .|. shiftMask, xK_n     ), spawn "/home/listdata/.xmonad/ff_news.sh")
    , ((mod4Mask              , xK_s     ), spawn (term1 ++ " -e vim ~/sched/todo.cog"))
    , ((mod4Mask .|. shiftMask, xK_s     ), spawn (term1 ++ " -e vim -p ~/sched/notes/*"))
    , ((mod4Mask              , xK_w     ), spawn "soffice")
    , ((mod4Mask              , xK_x     ), spawn term1)
    , ((mod4Mask .|. shiftMask, xK_x     ), spawn term3)
    , ((mod4Mask              , xK_z     ), spawn term2)
    -- ncmpcpp (mpd) controls
    , ((mod4Mask .|. controlMask, xK_o     ), spawn "ncmpcpp toggle")
    , ((mod4Mask .|. controlMask, xK_h     ), spawn "ncmpcpp stop; ncmpcpp play") -- "reset" current song to beginning
    , ((mod4Mask .|. controlMask, xK_j     ), spawn "ncmpcpp next")
    , ((mod4Mask .|. controlMask, xK_k     ), spawn "ncmpcpp prev")
    , ((mod4Mask .|. controlMask, xK_l     ), spawn "ncmpcpp stop")
    , ((mod4Mask .|. controlMask, xK_semicolon ), spawn "ncmpcpp play")
    -- toggle borders
    , ((modm              , xK_b ),   withFocused toggleBorder)
    -- gridselect
    , ((modm              , xK_f), goToSelected defaultGSConfig)
    -- volume controls
    , ((modm              , xK_backslash ), spawn "amixer -q set Master toggle")
    , ((modm              , xK_minus     ), spawn "amixer -q set Master 1dB- unmute")
    , ((modm              , xK_equal     ), spawn "amixer -q set Master 1.5dB+ unmute")
    -- screen brightness toggle
    , ((modm .|. shiftMask, xK_backslash ), spawn "sudo brightness") -- toggle brightness (100% or 0%)
    -- move mouse away to bottom-right of currently focused window
    , ((modm              , xK_BackSpace), warpToWindow 1 1)
    ]
    ++

    --
    -- mod-[1..9], Switch to workspace N
    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) ([xK_1..xK_9] ++ [xK_0] ++ [xK_F1..xK_F11] ++ [xK_F12])
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++

    [
      ((modm .|. altMask,   xK_j),              moveTo Next nonEmptyGrpWS) -- go to next non-empty WS, in current Group
    , ((modm .|. altMask,   xK_k),              moveTo Prev nonEmptyGrpWS) -- go to prev non-empty WS, in current Group
    , ((modm .|. altMask,   xK_l),              moveToNogreed Next $ diffWSGrpWS 1)     -- go to next WS Group
    , ((modm .|. altMask,   xK_h),              moveToNogreed Next $ diffWSGrpWS (-1))  -- go to previous WS Group (the "moveTo Next" part here ensures that, after getting our desired new WSGroup, that we always display the top WS of that Group
    , ((modm .|. altMask,   xK_o),              moveTo Next emptyGrpWS)    -- go to next hidden empty WS, in current Group
    -- for sending a window into another WS in the same group
    , ((modm .|. altMask .|. shiftMask, xK_j),  shiftTo Next grpWS) -- move window to next WS, in current Group
    , ((modm .|. altMask .|. shiftMask, xK_k),  shiftTo Prev grpWS) -- move window to prev WS, in current Group
    , ((modm, xK_semicolon),                    toggleWS) -- go to WS displayed previously
    ]

    ++

    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_l, xK_h, xK_r] [1,0]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]

-- Here are some custom WSType (window types that can be used by Cycle.WS) declaration.
--
-- hiddenEmptyWorkWS: same as built-in EmptyWS, but only for those workspaces designated as "Work"
-- in myWorkspaceGroups, and are hidden (not current workspace and also not any other workspace that
-- is displayed on another monitor's screen (if any))
--
-- hiddenNonEmptyWorkWS: same as built-in HiddenNonEmptyWS, but only for "Work" category of WS

-- WSIs :: X (WindowSpace -> Bool)
emptyGrpWS :: WSType
emptyGrpWS =
    WSIs $ do
    { currentWS <- gets (W.currentTag . windowset)
    ; let currentWSGrp = case lookup currentWS myWorkspaceGroups of
                            Just foundGrp -> foundGrp
                            otherwise -> None
    ; let isEmpty = isNothing . W.stack
    ; let isCurrentWSGrp = isWSGroup currentWSGrp . W.tag
    ; if currentWSGrp /= None
        then return (\w -> isEmpty w && isCurrentWSGrp w)
        else return (\w -> False) -- don't do anything if current workspace was not found (although this is theoretically impossible...)
    }

nonEmptyGrpWS :: WSType
nonEmptyGrpWS =
    WSIs $ do {
      currentWS <- gets (W.currentTag . windowset)
    ; let currentWSGrp = case lookup currentWS myWorkspaceGroups of
                            Just foundGrp -> foundGrp
                            otherwise -> None
    ; let isNonEmpty = isJust . W.stack
    ; let isCurrentWSGrp = isWSGroup currentWSGrp . W.tag
    ; if currentWSGrp /= None
        then return (\w -> isNonEmpty w && isCurrentWSGrp w)
        else return (\w -> False)
    }

diffWSGrpWS :: Int -> WSType
diffWSGrpWS dir =
    WSIs $ do {
      currentWS <- gets (W.currentTag . windowset)
    ; let currentWSGrp = case lookup currentWS myWorkspaceGroups of
                            Just foundGrp -> foundGrp
                            otherwise -> None
    ; if currentWSGrp /= None
        then do { let diffGrp = if dir > 0
                                    then nextGrp currentWSGrp
                                    else prevGrp currentWSGrp
                ; case diffGrp of
                    Just g -> return (\w -> isWSGroup g . W.tag $ w)
                    otherwise -> return (\w -> False)
                }
        else return (\w -> False) -- this case is theoretically impossible
    }

grpWS :: WSType
grpWS =
    WSIs $ do {
      currentWS <- gets (W.currentTag . windowset)
    ; let currentWSGrp = case lookup currentWS myWorkspaceGroups of
                            Just foundGrp -> foundGrp
                            otherwise -> None
    ; if currentWSGrp /= None
        then return (\w -> isWSGroup currentWSGrp . W.tag $ w)
        else return (\w -> False) -- this case is theoretically impossible
    }

_WSGROUPS = init [Net ..] -- list of all WSGroups (except None)

nextGrp, prevGrp :: MyWSGroup -> Maybe MyWSGroup
nextGrp g = if g == last _WSGROUPS
                then Nothing
                else Just $ head [x | x <- _WSGROUPS, x > g]

prevGrp g = if g == head _WSGROUPS
                then Nothing
                else Just $ last [x | x <- _WSGROUPS, x < g]

-- confirms if a given MyWSGGroup matches that of the given workspace string's designated MyWSGroup
isWSGroup :: MyWSGroup -> String -> Bool
isWSGroup grp str
    | lookup str myWorkspaceGroups == Just grp = True
    | otherwise = False

-- same as CycleWS's moveTo, but w/ view instead of greedyView
moveToNogreed :: Direction1D -> WSType -> X ()
moveToNogreed dir t = findWorkspace getSortByIndex dir t 1 >>= windows . W.view

------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))

    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]

------------------------------------------------------------------------
-- Layouts:

-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- * NOTE: XMonad.Hooks.EwmhDesktops users must remove the obsolete
-- ewmhDesktopsLayout modifier from layoutHook. It no longer exists.
-- Instead use the 'ewmh' function from that module to modify your
-- defaultConfig as a whole. (See also logHook, handleEventHook, and
-- startupHook ewmh notes.)
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
myLayout = Mirror tiled
        ||| tiled
        ||| noBorders Full
        ||| layoutHints Circle
    where
        -- default tiling algorithm partitions the screen into two panes
        tiled   = Tall nmaster delta ratio

        -- The default number of windows in the master pane
        nmaster = 1

        -- Default proportion of screen occupied by master pane
        ratio   = 1/2

        -- Percent of screen to increment by when resizing panes
        delta   = 3/100

------------------------------------------------------------------------
-- Window rules:

-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
-- e.g. WM_CLASS(STRING) = "Qt-subapplication", "VirtualBox"
-- here, Qt-subapplication is resource, and
-- VirtualBox is className
--
myManageHook = composeAll
    [ className =? "MPlayer"                            --> doFloat
    , className =? "Gimp"                               --> doFloat
    , className =? "Agave"                              --> doCenterFloat
    , resource  =? "desktop_window"                     --> doIgnore
    , resource  =? "kdesktop"                           --> doIgnore
    , resource  =? "vlc"                                --> doCenterFloat
    , stringProperty "WM_NAME"  =? "urxvtINIT"          --> doShift "3"
    , stringProperty "WM_NAME"  =? "htop"               --> doShift "F12"
    , stringProperty "WM_ICON_NAME"  =? "iftop"         --> doShift "F11"
    , stringProperty "WM_NAME"  =? "alsamixer"          --> doShift "F11"
    , resource  =? "WeeChat"                            --> doShift "F10"
    , stringProperty "WM_NAME"  =? "rtorrent"           --> doShift "F9"
    , stringProperty "WM_NAME"  =? "ncmpcpp"            --> doShift "0"
    , stringProperty "WM_NAME"  =? "mplayer"            --> doShift "0"
    , resource  =? "Navigator"                            --> doShift "1"
    --, className  =? "Blender"                           --> doShift "6"
    , className  =? "Blender:Render"                    --> doFloat
    , resource  =? "Browser"                            --> doFloat
    , className  =? "Galculator"                        --> doCenterFloat
    , className  =? "Gcalctool"                         --> doCenterFloat
    , className  =? "XClock"                            --> doCenterFloat
    , className  =? "Audacity"                          --> doFloat
    , className  =? "Gitk"                              --> doCenterFloat
    , className  =? "XDvi"                              --> doCenterFloat
    , className  =? "Scid"                              --> doFloat
    , stringProperty "WM_NAME"  =? "Scid"               --> doFloat
    , className  =? "Toplevel"                          --> doFloat -- Scid's many popup windows
    , className  =? "Pychess"                           --> doFloat
    , className  =? "Glchess"                           --> doFloat
    , className  =? "Raptor"                            --> doFloat
    , className  =? "Smplayer"                          --> doFloat
    , className  =? "linux_client"                      --> doFloat
    , className  =? "Bsnes"                             --> doCenterFloat
    --, className  =? "Wine"                              --> doFloat
    --, className  =? "Gvim"                              --> doCenterFloat
    , className  =? "VirtualBox"                        --> doFloat
    ]

------------------------------------------------------------------------
-- Event handling

-- Defines a custom handler function for X Events. The function should
-- return (All True) if the default handler is to be run afterwards. To
-- combine event hooks use mappend or mconcat from Data.Monoid.
--
-- * NOTE: EwmhDesktops users should use the 'ewmh' function from
-- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
-- It will add EWMH event handling to your custom event hooks by
-- combining them with ewmhDesktopsEventHook.
--
myEventHook = mempty

------------------------------------------------------------------------
-- Status bars and logging

-- Perform an arbitrary action on each internal state change or X event.
-- See the 'DynamicLog' extension for examples.
--
-- To emulate dwm's status bar
--
-- > logHook = dynamicLogDzen
--
-- * NOTE: EwmhDesktops users should use the 'ewmh' function from
-- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
-- It will add EWMH logHook actions to your custom log hook by
-- combining it with ewmhDesktopsLogHook.
--
myLogHook = return ()

------------------------------------------------------------------------
-- Startup hook

-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
--
-- * NOTE: EwmhDesktops users should use the 'ewmh' function from
-- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
-- It will add initialization of EWMH support to your custom startup
-- hook by combining it with ewmhDesktopsStartup.
--
--myStartupHook = return ()
myStartupHook = do
    spawn "/home/listdata/.xmonad/init.sh"

------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.

-- Run xmonad with the settings you specify. No need to modify this.
--
--main = xmonad defaults
main = do
    --host <- fmap nodeName getSystemID
    xmonad $ defaultConfig
        {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,

      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,

      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        handleEventHook    = myEventHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
        }

-- vim:syntax=haskell
