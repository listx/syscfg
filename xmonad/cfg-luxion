--
-- xmonad example config file.
--
-- A template showing all available configuration hooks,
-- and how to override the defaults in your own xmonad.hs conf file.
--
-- Normally, you'd only override those defaults you care about.
--
 
import XMonad
import System.Exit
-- enable default config, even though this template is based off of default config
import XMonad.Config (defaultConfig)

-- mouse warping (a cheap alternative to 'unclutter', since it doesn't play with xmonad very well)
import XMonad.Actions.Warp
 
import qualified XMonad.StackSet as W
import qualified Data.Map        as M

--import IO
--import XMonad.Hooks.DynamicLog
--import XMonad.Hooks.ManageDocks
-- for the spawnPipe function
--import XMonad.Util.Run

-- The preferred terminal program, which is used in a binding below and by
-- certain contrib modules.
--
myTerminal      = "urxvtc"
 
-- Width of the window border in pixels.
--
myBorderWidth   = 1
 
-- modMask lets you specify which modkey you want to use. The default
-- is mod1Mask ("left alt"). 
--
-- run 'xmodmask' to determine which keys are whick 'modmask' keys
--
-- The
-- "windows key" is usually mod4Mask.
--
myModMask       = mod3Mask
 
-- The mask for the numlock key. Numlock status is "masked" from the
-- current modifier status, so the keybindings will work with numlock on or
-- off. You may need to change this on some systems.
--
-- You can find the numlock modifier by running "xmodmap" and looking for a
-- modifier with Num_Lock bound to it:
--
-- > $ xmodmap | grep Num
-- > mod2        Num_Lock (0x4d)
--
-- Set numlockMask = 0 if you don't have a numlock key, or want to treat
-- numlock status separately.
--
myNumlockMask   = mod2Mask
 
-- The default number of workspaces (virtual screens) and their names.
-- By default we use numeric strings, but any string may be used as a
-- workspace name. The number of workspaces is determined by the length
-- of this list.
--
-- A tagging example:
--
-- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
--
myWorkspaces    = ["net","comm","study","photo","multimedia","other","music","sysutil","share"]
-- Border colors for unfocused and focused windows, respectively.
--
myNormalBorderColor  = "#000000"
myFocusedBorderColor = "#ffffff"
 
------------------------------------------------------------------------
-- Key bindings. Add, modify or remove key bindings here.
--
myKeys conf@(XConfig {XMonad.modMask = modMask}) = M.fromList $
 
    -- launch a terminal
    [ ((modMask .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
 
    -- launch dmenu
    , ((modMask,               xK_p     ), spawn "exe=`dmenu_path | dmenu` && eval \"exec $exe\"")
 
    -- launch gmrun
    , ((modMask .|. shiftMask, xK_p     ), spawn "gmrun")
 
    -- close focused window 
    --, ((modMask .|. shiftMask, xK_c     ), kill)
    , ((modMask, xK_d     ), kill)
 
     -- Rotate through the available layout algorithms
    , ((modMask,               xK_space ), sendMessage NextLayout)
 
    --  Reset the layouts on the current workspace to default
    , ((modMask .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
 
    -- Resize viewed windows to the correct size
    , ((modMask,               xK_n     ), refresh)
 
    -- Move focus to the next window
    , ((modMask,               xK_Tab   ), windows W.focusDown)
 
    -- Move focus to the next window
    , ((modMask,               xK_j     ), windows W.focusDown)
 
    -- Move focus to the previous window
    , ((modMask,               xK_k     ), windows W.focusUp  )
 
    -- Move focus to the master window
    , ((modMask,               xK_m     ), windows W.focusMaster  )
 
    -- Swap the focused window and the master window
    , ((modMask,               xK_Return), windows W.swapMaster)
 
    -- Swap the focused window with the next window
    , ((modMask .|. shiftMask, xK_j     ), windows W.swapDown  )
 
    -- Swap the focused window with the previous window
    , ((modMask .|. shiftMask, xK_k     ), windows W.swapUp    )
 
    -- Shrink the master area
    --, ((modMask,               xK_h     ), sendMessage Shrink)
    , ((modMask,               xK_w     ), sendMessage Shrink)
 
    -- Expand the master area
    --, ((modMask,               xK_l     ), sendMessage Expand)
    , ((modMask,               xK_e     ), sendMessage Expand)
 
    -- Push window back into tiling
    , ((modMask,               xK_t     ), withFocused $ windows . W.sink)
 
    -- Increment the number of windows in the master area
    , ((modMask              , xK_comma ), sendMessage (IncMasterN 1))
 
    -- Deincrement the number of windows in the master area
    , ((modMask              , xK_period), sendMessage (IncMasterN (-1)))
 
    -- toggle the status bar gap
    -- TODO, update this binding with avoidStruts , ((modMask              , xK_b     ), 
    -- Quit xmonad
    , ((modMask .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
 
    -- Restart xmonad
    , ((modMask              , xK_q     ), restart "xmonad" True)

    -- CUSTOM BINDINGS HERE
    -- move mouse away to bottom-right of currently focused window
    , ((modMask               , xK_BackSpace), warpToWindow 1 1)
    , ((mod4Mask              , xK_x     ), spawn "urxvtc")
    , ((mod4Mask .|. shiftMask, xK_x     ), spawn "urxvtc -name lhp")
    , ((mod4Mask              , xK_n     ), spawn "firefox")
    , ((mod4Mask .|. shiftMask, xK_n     ), spawn "urxvtc -e irssi --config=~/.irssi-untracked --home=~/syscfg/irssi")
    , ((mod4Mask              , xK_t     ), spawn "gvim")
    , ((mod4Mask .|. shiftMask, xK_t     ), spawn "xclock -digital -update 1 -strftime \"%F %a %T Wk %W\" -face terminus-9 -padding 45")
    , ((mod4Mask              , xK_c     ), spawn "galculator")
    , ((mod4Mask .|. shiftMask, xK_c     ), spawn "gcalctool")
    , ((mod4Mask              , xK_i     ), spawn "mirage")
    , ((mod4Mask              , xK_d     ), spawn "amule")
    , ((mod4Mask              , xK_w     ), spawn "soffice")
    , ((mod4Mask              , xK_m     ), spawn "blender")
    , ((mod4Mask              , xK_f     ), spawn "gnucash")
    , ((mod4Mask              , xK_h     ), spawn "urxvtc -e ncmpcpp")
    , ((mod4Mask .|. shiftMask, xK_h     ), spawn "urxvtc -e mplayer -ao oss -softvol -volume 10 -volstep 1 -prefer-ipv4 http://192.168.0.110:8000/mpd.ogg")
    , ((mod4Mask              , xK_p     ), spawn "apvlv")
    , ((mod4Mask .|. shiftMask, xK_p     ), spawn "evince")
    -- Function keys; the hex numbers correspond to what the XF86 keys mean -- these values are taken directly
    --    from /usr/share/X11/XKeysymDB.
    -- XF86AudioMute
    , ((0 , 0x1008ff12), spawn "amixer -q set Master toggle")
    -- XF86AudioLowerVolume
    , ((0 , 0x1008ff11), spawn "amixer -q set Master 1- unmute")
    -- XF86AudioRaiseVolume
    , ((0 , 0x1008ff13), spawn "amixer -q set Master 1+ unmute")
    --, ((mod4Mask              , xK_s     ), spawn "~/.xmonad/some-custom-multiapp-setup.sh")
    ]
    ++
 
    --
    -- mod-[1..9], Switch to workspace N
    -- mod-shift-[1..9], Move client to workspace N
    --
    [((m .|. modMask, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
    ++
 
    --
    -- mod-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
    -- mod-shift-{w,e,r}, Move client to screen 1, 2, or 3
    --
    --[((m .|. modMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
    --    | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
    --    , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
    [((m .|. modMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_h, xK_l, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
 
 
------------------------------------------------------------------------
-- Mouse bindings: default actions bound to mouse events
--
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $
 
    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modMask, button1), (\w -> focus w >> mouseMoveWindow w))
 
    -- mod-button2, Raise the window to the top of the stack
    , ((modMask, button2), (\w -> focus w >> windows W.swapMaster))
 
    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modMask, button3), (\w -> focus w >> mouseResizeWindow w))
 
    -- you may also bind events to the mouse scroll wheel (button4 and button5)
    ]
 
------------------------------------------------------------------------
-- Layouts:
 
-- You can specify and transform your layouts by modifying these values.
-- If you change layout bindings be sure to use 'mod-shift-space' after
-- restarting (with 'mod-q') to reset your layout state to the new
-- defaults, as xmonad preserves your old layout settings by default.
--
-- The available layouts.  Note that each layout is separated by |||,
-- which denotes layout choice.
--
--myLayout = tiled ||| Mirror tiled ||| Full
myLayout = Mirror tiled ||| tiled ||| Full
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled   = Tall nmaster delta ratio
 
     -- The default number of windows in the master pane
     nmaster = 1
 
     -- Default proportion of screen occupied by master pane
     ratio   = 1/2
 
     -- Percent of screen to increment by when resizing panes
     delta   = 3/100
 
------------------------------------------------------------------------
-- Window rules:
 
-- Execute arbitrary actions and WindowSet manipulations when managing
-- a new window. You can use this to, for example, always float a
-- particular program, or have a client always appear on a particular
-- workspace.
--
-- To find the property name associated with a program, use
-- > xprop | grep WM_CLASS
-- and click on the client you're interested in.
--
-- To match on the WM_NAME, you can use 'title' in the same way that
-- 'className' and 'resource' are used below.
--
--myWorkspaces    = ["net","comm","study","music","photo","multimedia","sysutil"] ++ map show [8..9]
myManageHook = composeAll
    [
    className =? "MPlayer"        --> doFloat
    , className =? "Gimp"           --> doFloat
    , resource  =? "desktop_window" --> doIgnore
    , resource  =? "kdesktop"       --> doIgnore
    -- make certain programs appear on certain workspaces
    -- this is VERY useful for making xmonad start programx X, Y, Z on bootup,
    -- and then have it automatically place these programs in these given
    -- workspaces!
    --
    -- the settings here are used in conjunction with the startup commands in ~/.xmonad/init.sh
    -- also, notice that ones with className mean that ANY and ALL instances of this will
    -- ALWAYS be shifted to the workspace specified
    , stringProperty "WM_NAME"  =? "ncmpcpp"              --> doShift "music"
    , stringProperty "WM_NAME"  =? "mplayer"              --> doShift "music"
    , stringProperty "WM_NAME"  =? "htop"              --> doShift "sysutil"
    , stringProperty "WM_NAME"  =? "alsamixer"              --> doShift "sysutil"
    , resource  =? "alpine"            --> doShift "comm"
    , resource  =? "Browser"    --> doFloat
    , className  =? "Galculator"    --> doFloat
    , className  =? "Blender"    --> doShift "multimedia"
    , className  =? "Blender:Render"    --> doFloat
    , className  =? "XClock"    --> doFloat
    , className  =? "Audacity"    --> doFloat
    , className  =? "Gitk"    --> doFloat
    , className  =? "Gcalctool"    --> doFloat
    , className  =? "Scid"    --> doFloat
    , className  =? "Pychess"    --> doFloat
    , className  =? "Glchess"    --> doFloat
    -- the following are NOT in the init.sh file -- so these are ones that should always be
    -- in a certain workspace, when started with a hotkey
    --, stringProperty "WM_NAME"  =? "[No Name] - GVIM"             --> doShift "study"
    ] -- <+> manageDocks
 
-- Whether focus follows the mouse pointer.
myFocusFollowsMouse :: Bool
myFocusFollowsMouse = True
 
 
------------------------------------------------------------------------
-- Status bars and logging
 
-- Perform an arbitrary action on each internal state change or X event.
-- See the 'DynamicLog' extension for examples.
--
-- To emulate dwm's status bar
--
-- > logHook = dynamicLogDzen
--
myLogHook = return ()

 
------------------------------------------------------------------------
-- Startup hook
 
-- Perform an arbitrary action each time xmonad starts or is restarted
-- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
-- per-workspace layout choices.
--
-- By default, do nothing.
--myStartupHook = return ()
myStartupHook = do
    spawn "/home/listdata/.xmonad/init.sh"
 
------------------------------------------------------------------------
-- Now run xmonad with all the defaults we set up.
 
-- Run xmonad with the settings you specify. No need to modify this.


--main = xmonad defaults

-- A structure containing your configuration settings, overriding
-- fields in the default config. Any you don't override, will 
-- use the defaults defined in xmonad/XMonad/Config.hs
-- 
-- No need to modify this.
{-
defaults = defaultConfig {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,
 
      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,
 
      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
}
-}

main = do
 --   xmobar <- spawnPipe "xmobar" -- spawns xmobar and returns a handle
    xmonad $ defaultConfig {
      -- simple stuff
        terminal           = myTerminal,
        focusFollowsMouse  = myFocusFollowsMouse,
        borderWidth        = myBorderWidth,
        modMask            = myModMask,
        numlockMask        = myNumlockMask,
        workspaces         = myWorkspaces,
        normalBorderColor  = myNormalBorderColor,
        focusedBorderColor = myFocusedBorderColor,
 
      -- key bindings
        keys               = myKeys,
        mouseBindings      = myMouseBindings,
 
      -- hooks, layouts
        layoutHook         = myLayout,
        manageHook         = myManageHook,
        logHook            = myLogHook,
        startupHook        = myStartupHook
}
